# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Strategytestpositionsizing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'equity_and_position_sizing_text': 'str',
        'starting_equity': 'float',
        'position_sizing_type_id': 'str',
        'position_sizing_type': 'str',
        'position_sizing_long_amount': 'float',
        'position_sizing_short_amount': 'float',
        'max_positions_text': 'str',
        'max_open_positions_all': 'int',
        'max_open_positions_long': 'int',
        'max_open_positions_short': 'int',
        'max_new_positions_in_one_day_all': 'int',
        'max_new_positions_in_one_day_long': 'int',
        'max_new_positions_in_one_day_short': 'int',
        'prioritize_text': 'str',
        'prioritize_highest_first': 'bool',
        'prioritize_item': 'Itemdefinition',
        'enter_exit_position_text': 'str',
        'enter_position_price_type_id': 'str',
        'enter_position_price_type': 'str',
        'exit_position_price_type_id': 'str',
        'exit_position_price_type': 'str',
        'existing_position_can_switch_long_short': 'bool',
        'round_position_down_amount': 'int'
    }

    attribute_map = {
        'equity_and_position_sizing_text': 'equity_and_position_sizing_text',
        'starting_equity': 'starting_equity',
        'position_sizing_type_id': 'position_sizing_type_id',
        'position_sizing_type': 'position_sizing_type',
        'position_sizing_long_amount': 'position_sizing_long_amount',
        'position_sizing_short_amount': 'position_sizing_short_amount',
        'max_positions_text': 'max_positions_text',
        'max_open_positions_all': 'max_open_positions_all',
        'max_open_positions_long': 'max_open_positions_long',
        'max_open_positions_short': 'max_open_positions_short',
        'max_new_positions_in_one_day_all': 'max_new_positions_in_one_day_all',
        'max_new_positions_in_one_day_long': 'max_new_positions_in_one_day_long',
        'max_new_positions_in_one_day_short': 'max_new_positions_in_one_day_short',
        'prioritize_text': 'prioritize_text',
        'prioritize_highest_first': 'prioritize_highest_first',
        'prioritize_item': 'prioritize_item',
        'enter_exit_position_text': 'enter_exit_position_text',
        'enter_position_price_type_id': 'enter_position_price_type_id',
        'enter_position_price_type': 'enter_position_price_type',
        'exit_position_price_type_id': 'exit_position_price_type_id',
        'exit_position_price_type': 'exit_position_price_type',
        'existing_position_can_switch_long_short': 'existing_position_can_switch_long_short',
        'round_position_down_amount': 'round_position_down_amount'
    }

    def __init__(self, equity_and_position_sizing_text=None, starting_equity=None, position_sizing_type_id=None, position_sizing_type=None, position_sizing_long_amount=None, position_sizing_short_amount=None, max_positions_text=None, max_open_positions_all=None, max_open_positions_long=None, max_open_positions_short=None, max_new_positions_in_one_day_all=None, max_new_positions_in_one_day_long=None, max_new_positions_in_one_day_short=None, prioritize_text=None, prioritize_highest_first=None, prioritize_item=None, enter_exit_position_text=None, enter_position_price_type_id=None, enter_position_price_type=None, exit_position_price_type_id=None, exit_position_price_type=None, existing_position_can_switch_long_short=None, round_position_down_amount=None, _configuration=None):  # noqa: E501
        """Strategytestpositionsizing - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._equity_and_position_sizing_text = None
        self._starting_equity = None
        self._position_sizing_type_id = None
        self._position_sizing_type = None
        self._position_sizing_long_amount = None
        self._position_sizing_short_amount = None
        self._max_positions_text = None
        self._max_open_positions_all = None
        self._max_open_positions_long = None
        self._max_open_positions_short = None
        self._max_new_positions_in_one_day_all = None
        self._max_new_positions_in_one_day_long = None
        self._max_new_positions_in_one_day_short = None
        self._prioritize_text = None
        self._prioritize_highest_first = None
        self._prioritize_item = None
        self._enter_exit_position_text = None
        self._enter_position_price_type_id = None
        self._enter_position_price_type = None
        self._exit_position_price_type_id = None
        self._exit_position_price_type = None
        self._existing_position_can_switch_long_short = None
        self._round_position_down_amount = None
        self.discriminator = None

        if equity_and_position_sizing_text is not None:
            self.equity_and_position_sizing_text = equity_and_position_sizing_text
        if starting_equity is not None:
            self.starting_equity = starting_equity
        if position_sizing_type_id is not None:
            self.position_sizing_type_id = position_sizing_type_id
        if position_sizing_type is not None:
            self.position_sizing_type = position_sizing_type
        if position_sizing_long_amount is not None:
            self.position_sizing_long_amount = position_sizing_long_amount
        if position_sizing_short_amount is not None:
            self.position_sizing_short_amount = position_sizing_short_amount
        if max_positions_text is not None:
            self.max_positions_text = max_positions_text
        if max_open_positions_all is not None:
            self.max_open_positions_all = max_open_positions_all
        if max_open_positions_long is not None:
            self.max_open_positions_long = max_open_positions_long
        if max_open_positions_short is not None:
            self.max_open_positions_short = max_open_positions_short
        if max_new_positions_in_one_day_all is not None:
            self.max_new_positions_in_one_day_all = max_new_positions_in_one_day_all
        if max_new_positions_in_one_day_long is not None:
            self.max_new_positions_in_one_day_long = max_new_positions_in_one_day_long
        if max_new_positions_in_one_day_short is not None:
            self.max_new_positions_in_one_day_short = max_new_positions_in_one_day_short
        if prioritize_text is not None:
            self.prioritize_text = prioritize_text
        if prioritize_highest_first is not None:
            self.prioritize_highest_first = prioritize_highest_first
        if prioritize_item is not None:
            self.prioritize_item = prioritize_item
        if enter_exit_position_text is not None:
            self.enter_exit_position_text = enter_exit_position_text
        if enter_position_price_type_id is not None:
            self.enter_position_price_type_id = enter_position_price_type_id
        if enter_position_price_type is not None:
            self.enter_position_price_type = enter_position_price_type
        if exit_position_price_type_id is not None:
            self.exit_position_price_type_id = exit_position_price_type_id
        if exit_position_price_type is not None:
            self.exit_position_price_type = exit_position_price_type
        if existing_position_can_switch_long_short is not None:
            self.existing_position_can_switch_long_short = existing_position_can_switch_long_short
        if round_position_down_amount is not None:
            self.round_position_down_amount = round_position_down_amount

    @property
    def equity_and_position_sizing_text(self):
        """Gets the equity_and_position_sizing_text of this Strategytestpositionsizing.  # noqa: E501


        :return: The equity_and_position_sizing_text of this Strategytestpositionsizing.  # noqa: E501
        :rtype: str
        """
        return self._equity_and_position_sizing_text

    @equity_and_position_sizing_text.setter
    def equity_and_position_sizing_text(self, equity_and_position_sizing_text):
        """Sets the equity_and_position_sizing_text of this Strategytestpositionsizing.


        :param equity_and_position_sizing_text: The equity_and_position_sizing_text of this Strategytestpositionsizing.  # noqa: E501
        :type: str
        """

        self._equity_and_position_sizing_text = equity_and_position_sizing_text

    @property
    def starting_equity(self):
        """Gets the starting_equity of this Strategytestpositionsizing.  # noqa: E501


        :return: The starting_equity of this Strategytestpositionsizing.  # noqa: E501
        :rtype: float
        """
        return self._starting_equity

    @starting_equity.setter
    def starting_equity(self, starting_equity):
        """Sets the starting_equity of this Strategytestpositionsizing.


        :param starting_equity: The starting_equity of this Strategytestpositionsizing.  # noqa: E501
        :type: float
        """

        self._starting_equity = starting_equity

    @property
    def position_sizing_type_id(self):
        """Gets the position_sizing_type_id of this Strategytestpositionsizing.  # noqa: E501


        :return: The position_sizing_type_id of this Strategytestpositionsizing.  # noqa: E501
        :rtype: str
        """
        return self._position_sizing_type_id

    @position_sizing_type_id.setter
    def position_sizing_type_id(self, position_sizing_type_id):
        """Sets the position_sizing_type_id of this Strategytestpositionsizing.


        :param position_sizing_type_id: The position_sizing_type_id of this Strategytestpositionsizing.  # noqa: E501
        :type: str
        """

        self._position_sizing_type_id = position_sizing_type_id

    @property
    def position_sizing_type(self):
        """Gets the position_sizing_type of this Strategytestpositionsizing.  # noqa: E501


        :return: The position_sizing_type of this Strategytestpositionsizing.  # noqa: E501
        :rtype: str
        """
        return self._position_sizing_type

    @position_sizing_type.setter
    def position_sizing_type(self, position_sizing_type):
        """Sets the position_sizing_type of this Strategytestpositionsizing.


        :param position_sizing_type: The position_sizing_type of this Strategytestpositionsizing.  # noqa: E501
        :type: str
        """

        self._position_sizing_type = position_sizing_type

    @property
    def position_sizing_long_amount(self):
        """Gets the position_sizing_long_amount of this Strategytestpositionsizing.  # noqa: E501


        :return: The position_sizing_long_amount of this Strategytestpositionsizing.  # noqa: E501
        :rtype: float
        """
        return self._position_sizing_long_amount

    @position_sizing_long_amount.setter
    def position_sizing_long_amount(self, position_sizing_long_amount):
        """Sets the position_sizing_long_amount of this Strategytestpositionsizing.


        :param position_sizing_long_amount: The position_sizing_long_amount of this Strategytestpositionsizing.  # noqa: E501
        :type: float
        """

        self._position_sizing_long_amount = position_sizing_long_amount

    @property
    def position_sizing_short_amount(self):
        """Gets the position_sizing_short_amount of this Strategytestpositionsizing.  # noqa: E501


        :return: The position_sizing_short_amount of this Strategytestpositionsizing.  # noqa: E501
        :rtype: float
        """
        return self._position_sizing_short_amount

    @position_sizing_short_amount.setter
    def position_sizing_short_amount(self, position_sizing_short_amount):
        """Sets the position_sizing_short_amount of this Strategytestpositionsizing.


        :param position_sizing_short_amount: The position_sizing_short_amount of this Strategytestpositionsizing.  # noqa: E501
        :type: float
        """

        self._position_sizing_short_amount = position_sizing_short_amount

    @property
    def max_positions_text(self):
        """Gets the max_positions_text of this Strategytestpositionsizing.  # noqa: E501


        :return: The max_positions_text of this Strategytestpositionsizing.  # noqa: E501
        :rtype: str
        """
        return self._max_positions_text

    @max_positions_text.setter
    def max_positions_text(self, max_positions_text):
        """Sets the max_positions_text of this Strategytestpositionsizing.


        :param max_positions_text: The max_positions_text of this Strategytestpositionsizing.  # noqa: E501
        :type: str
        """

        self._max_positions_text = max_positions_text

    @property
    def max_open_positions_all(self):
        """Gets the max_open_positions_all of this Strategytestpositionsizing.  # noqa: E501


        :return: The max_open_positions_all of this Strategytestpositionsizing.  # noqa: E501
        :rtype: int
        """
        return self._max_open_positions_all

    @max_open_positions_all.setter
    def max_open_positions_all(self, max_open_positions_all):
        """Sets the max_open_positions_all of this Strategytestpositionsizing.


        :param max_open_positions_all: The max_open_positions_all of this Strategytestpositionsizing.  # noqa: E501
        :type: int
        """

        self._max_open_positions_all = max_open_positions_all

    @property
    def max_open_positions_long(self):
        """Gets the max_open_positions_long of this Strategytestpositionsizing.  # noqa: E501


        :return: The max_open_positions_long of this Strategytestpositionsizing.  # noqa: E501
        :rtype: int
        """
        return self._max_open_positions_long

    @max_open_positions_long.setter
    def max_open_positions_long(self, max_open_positions_long):
        """Sets the max_open_positions_long of this Strategytestpositionsizing.


        :param max_open_positions_long: The max_open_positions_long of this Strategytestpositionsizing.  # noqa: E501
        :type: int
        """

        self._max_open_positions_long = max_open_positions_long

    @property
    def max_open_positions_short(self):
        """Gets the max_open_positions_short of this Strategytestpositionsizing.  # noqa: E501


        :return: The max_open_positions_short of this Strategytestpositionsizing.  # noqa: E501
        :rtype: int
        """
        return self._max_open_positions_short

    @max_open_positions_short.setter
    def max_open_positions_short(self, max_open_positions_short):
        """Sets the max_open_positions_short of this Strategytestpositionsizing.


        :param max_open_positions_short: The max_open_positions_short of this Strategytestpositionsizing.  # noqa: E501
        :type: int
        """

        self._max_open_positions_short = max_open_positions_short

    @property
    def max_new_positions_in_one_day_all(self):
        """Gets the max_new_positions_in_one_day_all of this Strategytestpositionsizing.  # noqa: E501


        :return: The max_new_positions_in_one_day_all of this Strategytestpositionsizing.  # noqa: E501
        :rtype: int
        """
        return self._max_new_positions_in_one_day_all

    @max_new_positions_in_one_day_all.setter
    def max_new_positions_in_one_day_all(self, max_new_positions_in_one_day_all):
        """Sets the max_new_positions_in_one_day_all of this Strategytestpositionsizing.


        :param max_new_positions_in_one_day_all: The max_new_positions_in_one_day_all of this Strategytestpositionsizing.  # noqa: E501
        :type: int
        """

        self._max_new_positions_in_one_day_all = max_new_positions_in_one_day_all

    @property
    def max_new_positions_in_one_day_long(self):
        """Gets the max_new_positions_in_one_day_long of this Strategytestpositionsizing.  # noqa: E501


        :return: The max_new_positions_in_one_day_long of this Strategytestpositionsizing.  # noqa: E501
        :rtype: int
        """
        return self._max_new_positions_in_one_day_long

    @max_new_positions_in_one_day_long.setter
    def max_new_positions_in_one_day_long(self, max_new_positions_in_one_day_long):
        """Sets the max_new_positions_in_one_day_long of this Strategytestpositionsizing.


        :param max_new_positions_in_one_day_long: The max_new_positions_in_one_day_long of this Strategytestpositionsizing.  # noqa: E501
        :type: int
        """

        self._max_new_positions_in_one_day_long = max_new_positions_in_one_day_long

    @property
    def max_new_positions_in_one_day_short(self):
        """Gets the max_new_positions_in_one_day_short of this Strategytestpositionsizing.  # noqa: E501


        :return: The max_new_positions_in_one_day_short of this Strategytestpositionsizing.  # noqa: E501
        :rtype: int
        """
        return self._max_new_positions_in_one_day_short

    @max_new_positions_in_one_day_short.setter
    def max_new_positions_in_one_day_short(self, max_new_positions_in_one_day_short):
        """Sets the max_new_positions_in_one_day_short of this Strategytestpositionsizing.


        :param max_new_positions_in_one_day_short: The max_new_positions_in_one_day_short of this Strategytestpositionsizing.  # noqa: E501
        :type: int
        """

        self._max_new_positions_in_one_day_short = max_new_positions_in_one_day_short

    @property
    def prioritize_text(self):
        """Gets the prioritize_text of this Strategytestpositionsizing.  # noqa: E501


        :return: The prioritize_text of this Strategytestpositionsizing.  # noqa: E501
        :rtype: str
        """
        return self._prioritize_text

    @prioritize_text.setter
    def prioritize_text(self, prioritize_text):
        """Sets the prioritize_text of this Strategytestpositionsizing.


        :param prioritize_text: The prioritize_text of this Strategytestpositionsizing.  # noqa: E501
        :type: str
        """

        self._prioritize_text = prioritize_text

    @property
    def prioritize_highest_first(self):
        """Gets the prioritize_highest_first of this Strategytestpositionsizing.  # noqa: E501


        :return: The prioritize_highest_first of this Strategytestpositionsizing.  # noqa: E501
        :rtype: bool
        """
        return self._prioritize_highest_first

    @prioritize_highest_first.setter
    def prioritize_highest_first(self, prioritize_highest_first):
        """Sets the prioritize_highest_first of this Strategytestpositionsizing.


        :param prioritize_highest_first: The prioritize_highest_first of this Strategytestpositionsizing.  # noqa: E501
        :type: bool
        """

        self._prioritize_highest_first = prioritize_highest_first

    @property
    def prioritize_item(self):
        """Gets the prioritize_item of this Strategytestpositionsizing.  # noqa: E501


        :return: The prioritize_item of this Strategytestpositionsizing.  # noqa: E501
        :rtype: Itemdefinition
        """
        return self._prioritize_item

    @prioritize_item.setter
    def prioritize_item(self, prioritize_item):
        """Sets the prioritize_item of this Strategytestpositionsizing.


        :param prioritize_item: The prioritize_item of this Strategytestpositionsizing.  # noqa: E501
        :type: Itemdefinition
        """

        self._prioritize_item = prioritize_item

    @property
    def enter_exit_position_text(self):
        """Gets the enter_exit_position_text of this Strategytestpositionsizing.  # noqa: E501


        :return: The enter_exit_position_text of this Strategytestpositionsizing.  # noqa: E501
        :rtype: str
        """
        return self._enter_exit_position_text

    @enter_exit_position_text.setter
    def enter_exit_position_text(self, enter_exit_position_text):
        """Sets the enter_exit_position_text of this Strategytestpositionsizing.


        :param enter_exit_position_text: The enter_exit_position_text of this Strategytestpositionsizing.  # noqa: E501
        :type: str
        """

        self._enter_exit_position_text = enter_exit_position_text

    @property
    def enter_position_price_type_id(self):
        """Gets the enter_position_price_type_id of this Strategytestpositionsizing.  # noqa: E501


        :return: The enter_position_price_type_id of this Strategytestpositionsizing.  # noqa: E501
        :rtype: str
        """
        return self._enter_position_price_type_id

    @enter_position_price_type_id.setter
    def enter_position_price_type_id(self, enter_position_price_type_id):
        """Sets the enter_position_price_type_id of this Strategytestpositionsizing.


        :param enter_position_price_type_id: The enter_position_price_type_id of this Strategytestpositionsizing.  # noqa: E501
        :type: str
        """

        self._enter_position_price_type_id = enter_position_price_type_id

    @property
    def enter_position_price_type(self):
        """Gets the enter_position_price_type of this Strategytestpositionsizing.  # noqa: E501


        :return: The enter_position_price_type of this Strategytestpositionsizing.  # noqa: E501
        :rtype: str
        """
        return self._enter_position_price_type

    @enter_position_price_type.setter
    def enter_position_price_type(self, enter_position_price_type):
        """Sets the enter_position_price_type of this Strategytestpositionsizing.


        :param enter_position_price_type: The enter_position_price_type of this Strategytestpositionsizing.  # noqa: E501
        :type: str
        """

        self._enter_position_price_type = enter_position_price_type

    @property
    def exit_position_price_type_id(self):
        """Gets the exit_position_price_type_id of this Strategytestpositionsizing.  # noqa: E501


        :return: The exit_position_price_type_id of this Strategytestpositionsizing.  # noqa: E501
        :rtype: str
        """
        return self._exit_position_price_type_id

    @exit_position_price_type_id.setter
    def exit_position_price_type_id(self, exit_position_price_type_id):
        """Sets the exit_position_price_type_id of this Strategytestpositionsizing.


        :param exit_position_price_type_id: The exit_position_price_type_id of this Strategytestpositionsizing.  # noqa: E501
        :type: str
        """

        self._exit_position_price_type_id = exit_position_price_type_id

    @property
    def exit_position_price_type(self):
        """Gets the exit_position_price_type of this Strategytestpositionsizing.  # noqa: E501


        :return: The exit_position_price_type of this Strategytestpositionsizing.  # noqa: E501
        :rtype: str
        """
        return self._exit_position_price_type

    @exit_position_price_type.setter
    def exit_position_price_type(self, exit_position_price_type):
        """Sets the exit_position_price_type of this Strategytestpositionsizing.


        :param exit_position_price_type: The exit_position_price_type of this Strategytestpositionsizing.  # noqa: E501
        :type: str
        """

        self._exit_position_price_type = exit_position_price_type

    @property
    def existing_position_can_switch_long_short(self):
        """Gets the existing_position_can_switch_long_short of this Strategytestpositionsizing.  # noqa: E501


        :return: The existing_position_can_switch_long_short of this Strategytestpositionsizing.  # noqa: E501
        :rtype: bool
        """
        return self._existing_position_can_switch_long_short

    @existing_position_can_switch_long_short.setter
    def existing_position_can_switch_long_short(self, existing_position_can_switch_long_short):
        """Sets the existing_position_can_switch_long_short of this Strategytestpositionsizing.


        :param existing_position_can_switch_long_short: The existing_position_can_switch_long_short of this Strategytestpositionsizing.  # noqa: E501
        :type: bool
        """

        self._existing_position_can_switch_long_short = existing_position_can_switch_long_short

    @property
    def round_position_down_amount(self):
        """Gets the round_position_down_amount of this Strategytestpositionsizing.  # noqa: E501


        :return: The round_position_down_amount of this Strategytestpositionsizing.  # noqa: E501
        :rtype: int
        """
        return self._round_position_down_amount

    @round_position_down_amount.setter
    def round_position_down_amount(self, round_position_down_amount):
        """Sets the round_position_down_amount of this Strategytestpositionsizing.


        :param round_position_down_amount: The round_position_down_amount of this Strategytestpositionsizing.  # noqa: E501
        :type: int
        """

        self._round_position_down_amount = round_position_down_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Strategytestpositionsizing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Strategytestpositionsizing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Strategytestpositionsizing):
            return True

        return self.to_dict() != other.to_dict()
