# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Strategyteststopsandtargets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stop_loss_text': 'str',
        'stop_loss_long_pct': 'float',
        'stop_loss_short_pct': 'float',
        'stop_loss_long_atrs': 'float',
        'stop_loss_short_atrs': 'float',
        'stop_loss_exit_price_type': 'str',
        'stop_loss_exit_price_type_id': 'str',
        'trailing_stop_loss_text': 'str',
        'trailing_stop_loss_long_pct': 'float',
        'trailing_stop_loss_short_pct': 'float',
        'trailing_stop_loss_long_atrs': 'float',
        'trailing_stop_loss_short_atrs': 'float',
        'trailing_stop_loss_exit_price_type': 'str',
        'trailing_stop_loss_exit_price_type_id': 'str',
        'trailing_stop_loss_price_to_use': 'str',
        'trailing_stop_loss_price_to_use_id': 'str',
        'target_text': 'str',
        'target_long_pct': 'float',
        'target_short_pct': 'float',
        'target_long_atrs': 'float',
        'target_short_atrs': 'float',
        'target_exit_price_type': 'str',
        'target_exit_price_type_id': 'str',
        'period_for_atr_stops_and_mae': 'int',
        'time_stop_text': 'str',
        'time_stop_long_days': 'int',
        'time_stop_short_days': 'int',
        'time_stop_exit_price_type': 'str',
        'time_stop_exit_price_type_id': 'str'
    }

    attribute_map = {
        'stop_loss_text': 'stop_loss_text',
        'stop_loss_long_pct': 'stop_loss_long_pct',
        'stop_loss_short_pct': 'stop_loss_short_pct',
        'stop_loss_long_atrs': 'stop_loss_long_atrs',
        'stop_loss_short_atrs': 'stop_loss_short_atrs',
        'stop_loss_exit_price_type': 'stop_loss_exit_price_type',
        'stop_loss_exit_price_type_id': 'stop_loss_exit_price_type_id',
        'trailing_stop_loss_text': 'trailing_stop_loss_text',
        'trailing_stop_loss_long_pct': 'trailing_stop_loss_long_pct',
        'trailing_stop_loss_short_pct': 'trailing_stop_loss_short_pct',
        'trailing_stop_loss_long_atrs': 'trailing_stop_loss_long_atrs',
        'trailing_stop_loss_short_atrs': 'trailing_stop_loss_short_atrs',
        'trailing_stop_loss_exit_price_type': 'trailing_stop_loss_exit_price_type',
        'trailing_stop_loss_exit_price_type_id': 'trailing_stop_loss_exit_price_type_id',
        'trailing_stop_loss_price_to_use': 'trailing_stop_loss_price_to_use',
        'trailing_stop_loss_price_to_use_id': 'trailing_stop_loss_price_to_use_id',
        'target_text': 'target_text',
        'target_long_pct': 'target_long_pct',
        'target_short_pct': 'target_short_pct',
        'target_long_atrs': 'target_long_atrs',
        'target_short_atrs': 'target_short_atrs',
        'target_exit_price_type': 'target_exit_price_type',
        'target_exit_price_type_id': 'target_exit_price_type_id',
        'period_for_atr_stops_and_mae': 'period_for_atr_stops_and_mae',
        'time_stop_text': 'time_stop_text',
        'time_stop_long_days': 'time_stop_long_days',
        'time_stop_short_days': 'time_stop_short_days',
        'time_stop_exit_price_type': 'time_stop_exit_price_type',
        'time_stop_exit_price_type_id': 'time_stop_exit_price_type_id'
    }

    def __init__(self, stop_loss_text=None, stop_loss_long_pct=None, stop_loss_short_pct=None, stop_loss_long_atrs=None, stop_loss_short_atrs=None, stop_loss_exit_price_type=None, stop_loss_exit_price_type_id=None, trailing_stop_loss_text=None, trailing_stop_loss_long_pct=None, trailing_stop_loss_short_pct=None, trailing_stop_loss_long_atrs=None, trailing_stop_loss_short_atrs=None, trailing_stop_loss_exit_price_type=None, trailing_stop_loss_exit_price_type_id=None, trailing_stop_loss_price_to_use=None, trailing_stop_loss_price_to_use_id=None, target_text=None, target_long_pct=None, target_short_pct=None, target_long_atrs=None, target_short_atrs=None, target_exit_price_type=None, target_exit_price_type_id=None, period_for_atr_stops_and_mae=None, time_stop_text=None, time_stop_long_days=None, time_stop_short_days=None, time_stop_exit_price_type=None, time_stop_exit_price_type_id=None, _configuration=None):  # noqa: E501
        """Strategyteststopsandtargets - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._stop_loss_text = None
        self._stop_loss_long_pct = None
        self._stop_loss_short_pct = None
        self._stop_loss_long_atrs = None
        self._stop_loss_short_atrs = None
        self._stop_loss_exit_price_type = None
        self._stop_loss_exit_price_type_id = None
        self._trailing_stop_loss_text = None
        self._trailing_stop_loss_long_pct = None
        self._trailing_stop_loss_short_pct = None
        self._trailing_stop_loss_long_atrs = None
        self._trailing_stop_loss_short_atrs = None
        self._trailing_stop_loss_exit_price_type = None
        self._trailing_stop_loss_exit_price_type_id = None
        self._trailing_stop_loss_price_to_use = None
        self._trailing_stop_loss_price_to_use_id = None
        self._target_text = None
        self._target_long_pct = None
        self._target_short_pct = None
        self._target_long_atrs = None
        self._target_short_atrs = None
        self._target_exit_price_type = None
        self._target_exit_price_type_id = None
        self._period_for_atr_stops_and_mae = None
        self._time_stop_text = None
        self._time_stop_long_days = None
        self._time_stop_short_days = None
        self._time_stop_exit_price_type = None
        self._time_stop_exit_price_type_id = None
        self.discriminator = None

        if stop_loss_text is not None:
            self.stop_loss_text = stop_loss_text
        if stop_loss_long_pct is not None:
            self.stop_loss_long_pct = stop_loss_long_pct
        if stop_loss_short_pct is not None:
            self.stop_loss_short_pct = stop_loss_short_pct
        if stop_loss_long_atrs is not None:
            self.stop_loss_long_atrs = stop_loss_long_atrs
        if stop_loss_short_atrs is not None:
            self.stop_loss_short_atrs = stop_loss_short_atrs
        if stop_loss_exit_price_type is not None:
            self.stop_loss_exit_price_type = stop_loss_exit_price_type
        if stop_loss_exit_price_type_id is not None:
            self.stop_loss_exit_price_type_id = stop_loss_exit_price_type_id
        if trailing_stop_loss_text is not None:
            self.trailing_stop_loss_text = trailing_stop_loss_text
        if trailing_stop_loss_long_pct is not None:
            self.trailing_stop_loss_long_pct = trailing_stop_loss_long_pct
        if trailing_stop_loss_short_pct is not None:
            self.trailing_stop_loss_short_pct = trailing_stop_loss_short_pct
        if trailing_stop_loss_long_atrs is not None:
            self.trailing_stop_loss_long_atrs = trailing_stop_loss_long_atrs
        if trailing_stop_loss_short_atrs is not None:
            self.trailing_stop_loss_short_atrs = trailing_stop_loss_short_atrs
        if trailing_stop_loss_exit_price_type is not None:
            self.trailing_stop_loss_exit_price_type = trailing_stop_loss_exit_price_type
        if trailing_stop_loss_exit_price_type_id is not None:
            self.trailing_stop_loss_exit_price_type_id = trailing_stop_loss_exit_price_type_id
        if trailing_stop_loss_price_to_use is not None:
            self.trailing_stop_loss_price_to_use = trailing_stop_loss_price_to_use
        if trailing_stop_loss_price_to_use_id is not None:
            self.trailing_stop_loss_price_to_use_id = trailing_stop_loss_price_to_use_id
        if target_text is not None:
            self.target_text = target_text
        if target_long_pct is not None:
            self.target_long_pct = target_long_pct
        if target_short_pct is not None:
            self.target_short_pct = target_short_pct
        if target_long_atrs is not None:
            self.target_long_atrs = target_long_atrs
        if target_short_atrs is not None:
            self.target_short_atrs = target_short_atrs
        if target_exit_price_type is not None:
            self.target_exit_price_type = target_exit_price_type
        if target_exit_price_type_id is not None:
            self.target_exit_price_type_id = target_exit_price_type_id
        if period_for_atr_stops_and_mae is not None:
            self.period_for_atr_stops_and_mae = period_for_atr_stops_and_mae
        if time_stop_text is not None:
            self.time_stop_text = time_stop_text
        if time_stop_long_days is not None:
            self.time_stop_long_days = time_stop_long_days
        if time_stop_short_days is not None:
            self.time_stop_short_days = time_stop_short_days
        if time_stop_exit_price_type is not None:
            self.time_stop_exit_price_type = time_stop_exit_price_type
        if time_stop_exit_price_type_id is not None:
            self.time_stop_exit_price_type_id = time_stop_exit_price_type_id

    @property
    def stop_loss_text(self):
        """Gets the stop_loss_text of this Strategyteststopsandtargets.  # noqa: E501


        :return: The stop_loss_text of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._stop_loss_text

    @stop_loss_text.setter
    def stop_loss_text(self, stop_loss_text):
        """Sets the stop_loss_text of this Strategyteststopsandtargets.


        :param stop_loss_text: The stop_loss_text of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._stop_loss_text = stop_loss_text

    @property
    def stop_loss_long_pct(self):
        """Gets the stop_loss_long_pct of this Strategyteststopsandtargets.  # noqa: E501


        :return: The stop_loss_long_pct of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._stop_loss_long_pct

    @stop_loss_long_pct.setter
    def stop_loss_long_pct(self, stop_loss_long_pct):
        """Sets the stop_loss_long_pct of this Strategyteststopsandtargets.


        :param stop_loss_long_pct: The stop_loss_long_pct of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._stop_loss_long_pct = stop_loss_long_pct

    @property
    def stop_loss_short_pct(self):
        """Gets the stop_loss_short_pct of this Strategyteststopsandtargets.  # noqa: E501


        :return: The stop_loss_short_pct of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._stop_loss_short_pct

    @stop_loss_short_pct.setter
    def stop_loss_short_pct(self, stop_loss_short_pct):
        """Sets the stop_loss_short_pct of this Strategyteststopsandtargets.


        :param stop_loss_short_pct: The stop_loss_short_pct of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._stop_loss_short_pct = stop_loss_short_pct

    @property
    def stop_loss_long_atrs(self):
        """Gets the stop_loss_long_atrs of this Strategyteststopsandtargets.  # noqa: E501


        :return: The stop_loss_long_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._stop_loss_long_atrs

    @stop_loss_long_atrs.setter
    def stop_loss_long_atrs(self, stop_loss_long_atrs):
        """Sets the stop_loss_long_atrs of this Strategyteststopsandtargets.


        :param stop_loss_long_atrs: The stop_loss_long_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._stop_loss_long_atrs = stop_loss_long_atrs

    @property
    def stop_loss_short_atrs(self):
        """Gets the stop_loss_short_atrs of this Strategyteststopsandtargets.  # noqa: E501


        :return: The stop_loss_short_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._stop_loss_short_atrs

    @stop_loss_short_atrs.setter
    def stop_loss_short_atrs(self, stop_loss_short_atrs):
        """Sets the stop_loss_short_atrs of this Strategyteststopsandtargets.


        :param stop_loss_short_atrs: The stop_loss_short_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._stop_loss_short_atrs = stop_loss_short_atrs

    @property
    def stop_loss_exit_price_type(self):
        """Gets the stop_loss_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501


        :return: The stop_loss_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._stop_loss_exit_price_type

    @stop_loss_exit_price_type.setter
    def stop_loss_exit_price_type(self, stop_loss_exit_price_type):
        """Sets the stop_loss_exit_price_type of this Strategyteststopsandtargets.


        :param stop_loss_exit_price_type: The stop_loss_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._stop_loss_exit_price_type = stop_loss_exit_price_type

    @property
    def stop_loss_exit_price_type_id(self):
        """Gets the stop_loss_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501


        :return: The stop_loss_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._stop_loss_exit_price_type_id

    @stop_loss_exit_price_type_id.setter
    def stop_loss_exit_price_type_id(self, stop_loss_exit_price_type_id):
        """Sets the stop_loss_exit_price_type_id of this Strategyteststopsandtargets.


        :param stop_loss_exit_price_type_id: The stop_loss_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._stop_loss_exit_price_type_id = stop_loss_exit_price_type_id

    @property
    def trailing_stop_loss_text(self):
        """Gets the trailing_stop_loss_text of this Strategyteststopsandtargets.  # noqa: E501


        :return: The trailing_stop_loss_text of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._trailing_stop_loss_text

    @trailing_stop_loss_text.setter
    def trailing_stop_loss_text(self, trailing_stop_loss_text):
        """Sets the trailing_stop_loss_text of this Strategyteststopsandtargets.


        :param trailing_stop_loss_text: The trailing_stop_loss_text of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._trailing_stop_loss_text = trailing_stop_loss_text

    @property
    def trailing_stop_loss_long_pct(self):
        """Gets the trailing_stop_loss_long_pct of this Strategyteststopsandtargets.  # noqa: E501


        :return: The trailing_stop_loss_long_pct of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._trailing_stop_loss_long_pct

    @trailing_stop_loss_long_pct.setter
    def trailing_stop_loss_long_pct(self, trailing_stop_loss_long_pct):
        """Sets the trailing_stop_loss_long_pct of this Strategyteststopsandtargets.


        :param trailing_stop_loss_long_pct: The trailing_stop_loss_long_pct of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._trailing_stop_loss_long_pct = trailing_stop_loss_long_pct

    @property
    def trailing_stop_loss_short_pct(self):
        """Gets the trailing_stop_loss_short_pct of this Strategyteststopsandtargets.  # noqa: E501


        :return: The trailing_stop_loss_short_pct of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._trailing_stop_loss_short_pct

    @trailing_stop_loss_short_pct.setter
    def trailing_stop_loss_short_pct(self, trailing_stop_loss_short_pct):
        """Sets the trailing_stop_loss_short_pct of this Strategyteststopsandtargets.


        :param trailing_stop_loss_short_pct: The trailing_stop_loss_short_pct of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._trailing_stop_loss_short_pct = trailing_stop_loss_short_pct

    @property
    def trailing_stop_loss_long_atrs(self):
        """Gets the trailing_stop_loss_long_atrs of this Strategyteststopsandtargets.  # noqa: E501


        :return: The trailing_stop_loss_long_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._trailing_stop_loss_long_atrs

    @trailing_stop_loss_long_atrs.setter
    def trailing_stop_loss_long_atrs(self, trailing_stop_loss_long_atrs):
        """Sets the trailing_stop_loss_long_atrs of this Strategyteststopsandtargets.


        :param trailing_stop_loss_long_atrs: The trailing_stop_loss_long_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._trailing_stop_loss_long_atrs = trailing_stop_loss_long_atrs

    @property
    def trailing_stop_loss_short_atrs(self):
        """Gets the trailing_stop_loss_short_atrs of this Strategyteststopsandtargets.  # noqa: E501


        :return: The trailing_stop_loss_short_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._trailing_stop_loss_short_atrs

    @trailing_stop_loss_short_atrs.setter
    def trailing_stop_loss_short_atrs(self, trailing_stop_loss_short_atrs):
        """Sets the trailing_stop_loss_short_atrs of this Strategyteststopsandtargets.


        :param trailing_stop_loss_short_atrs: The trailing_stop_loss_short_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._trailing_stop_loss_short_atrs = trailing_stop_loss_short_atrs

    @property
    def trailing_stop_loss_exit_price_type(self):
        """Gets the trailing_stop_loss_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501


        :return: The trailing_stop_loss_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._trailing_stop_loss_exit_price_type

    @trailing_stop_loss_exit_price_type.setter
    def trailing_stop_loss_exit_price_type(self, trailing_stop_loss_exit_price_type):
        """Sets the trailing_stop_loss_exit_price_type of this Strategyteststopsandtargets.


        :param trailing_stop_loss_exit_price_type: The trailing_stop_loss_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._trailing_stop_loss_exit_price_type = trailing_stop_loss_exit_price_type

    @property
    def trailing_stop_loss_exit_price_type_id(self):
        """Gets the trailing_stop_loss_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501


        :return: The trailing_stop_loss_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._trailing_stop_loss_exit_price_type_id

    @trailing_stop_loss_exit_price_type_id.setter
    def trailing_stop_loss_exit_price_type_id(self, trailing_stop_loss_exit_price_type_id):
        """Sets the trailing_stop_loss_exit_price_type_id of this Strategyteststopsandtargets.


        :param trailing_stop_loss_exit_price_type_id: The trailing_stop_loss_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._trailing_stop_loss_exit_price_type_id = trailing_stop_loss_exit_price_type_id

    @property
    def trailing_stop_loss_price_to_use(self):
        """Gets the trailing_stop_loss_price_to_use of this Strategyteststopsandtargets.  # noqa: E501


        :return: The trailing_stop_loss_price_to_use of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._trailing_stop_loss_price_to_use

    @trailing_stop_loss_price_to_use.setter
    def trailing_stop_loss_price_to_use(self, trailing_stop_loss_price_to_use):
        """Sets the trailing_stop_loss_price_to_use of this Strategyteststopsandtargets.


        :param trailing_stop_loss_price_to_use: The trailing_stop_loss_price_to_use of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._trailing_stop_loss_price_to_use = trailing_stop_loss_price_to_use

    @property
    def trailing_stop_loss_price_to_use_id(self):
        """Gets the trailing_stop_loss_price_to_use_id of this Strategyteststopsandtargets.  # noqa: E501


        :return: The trailing_stop_loss_price_to_use_id of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._trailing_stop_loss_price_to_use_id

    @trailing_stop_loss_price_to_use_id.setter
    def trailing_stop_loss_price_to_use_id(self, trailing_stop_loss_price_to_use_id):
        """Sets the trailing_stop_loss_price_to_use_id of this Strategyteststopsandtargets.


        :param trailing_stop_loss_price_to_use_id: The trailing_stop_loss_price_to_use_id of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._trailing_stop_loss_price_to_use_id = trailing_stop_loss_price_to_use_id

    @property
    def target_text(self):
        """Gets the target_text of this Strategyteststopsandtargets.  # noqa: E501


        :return: The target_text of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._target_text

    @target_text.setter
    def target_text(self, target_text):
        """Sets the target_text of this Strategyteststopsandtargets.


        :param target_text: The target_text of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._target_text = target_text

    @property
    def target_long_pct(self):
        """Gets the target_long_pct of this Strategyteststopsandtargets.  # noqa: E501


        :return: The target_long_pct of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._target_long_pct

    @target_long_pct.setter
    def target_long_pct(self, target_long_pct):
        """Sets the target_long_pct of this Strategyteststopsandtargets.


        :param target_long_pct: The target_long_pct of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._target_long_pct = target_long_pct

    @property
    def target_short_pct(self):
        """Gets the target_short_pct of this Strategyteststopsandtargets.  # noqa: E501


        :return: The target_short_pct of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._target_short_pct

    @target_short_pct.setter
    def target_short_pct(self, target_short_pct):
        """Sets the target_short_pct of this Strategyteststopsandtargets.


        :param target_short_pct: The target_short_pct of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._target_short_pct = target_short_pct

    @property
    def target_long_atrs(self):
        """Gets the target_long_atrs of this Strategyteststopsandtargets.  # noqa: E501


        :return: The target_long_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._target_long_atrs

    @target_long_atrs.setter
    def target_long_atrs(self, target_long_atrs):
        """Sets the target_long_atrs of this Strategyteststopsandtargets.


        :param target_long_atrs: The target_long_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._target_long_atrs = target_long_atrs

    @property
    def target_short_atrs(self):
        """Gets the target_short_atrs of this Strategyteststopsandtargets.  # noqa: E501


        :return: The target_short_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: float
        """
        return self._target_short_atrs

    @target_short_atrs.setter
    def target_short_atrs(self, target_short_atrs):
        """Sets the target_short_atrs of this Strategyteststopsandtargets.


        :param target_short_atrs: The target_short_atrs of this Strategyteststopsandtargets.  # noqa: E501
        :type: float
        """

        self._target_short_atrs = target_short_atrs

    @property
    def target_exit_price_type(self):
        """Gets the target_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501


        :return: The target_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._target_exit_price_type

    @target_exit_price_type.setter
    def target_exit_price_type(self, target_exit_price_type):
        """Sets the target_exit_price_type of this Strategyteststopsandtargets.


        :param target_exit_price_type: The target_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._target_exit_price_type = target_exit_price_type

    @property
    def target_exit_price_type_id(self):
        """Gets the target_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501


        :return: The target_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._target_exit_price_type_id

    @target_exit_price_type_id.setter
    def target_exit_price_type_id(self, target_exit_price_type_id):
        """Sets the target_exit_price_type_id of this Strategyteststopsandtargets.


        :param target_exit_price_type_id: The target_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._target_exit_price_type_id = target_exit_price_type_id

    @property
    def period_for_atr_stops_and_mae(self):
        """Gets the period_for_atr_stops_and_mae of this Strategyteststopsandtargets.  # noqa: E501


        :return: The period_for_atr_stops_and_mae of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: int
        """
        return self._period_for_atr_stops_and_mae

    @period_for_atr_stops_and_mae.setter
    def period_for_atr_stops_and_mae(self, period_for_atr_stops_and_mae):
        """Sets the period_for_atr_stops_and_mae of this Strategyteststopsandtargets.


        :param period_for_atr_stops_and_mae: The period_for_atr_stops_and_mae of this Strategyteststopsandtargets.  # noqa: E501
        :type: int
        """

        self._period_for_atr_stops_and_mae = period_for_atr_stops_and_mae

    @property
    def time_stop_text(self):
        """Gets the time_stop_text of this Strategyteststopsandtargets.  # noqa: E501


        :return: The time_stop_text of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._time_stop_text

    @time_stop_text.setter
    def time_stop_text(self, time_stop_text):
        """Sets the time_stop_text of this Strategyteststopsandtargets.


        :param time_stop_text: The time_stop_text of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._time_stop_text = time_stop_text

    @property
    def time_stop_long_days(self):
        """Gets the time_stop_long_days of this Strategyteststopsandtargets.  # noqa: E501


        :return: The time_stop_long_days of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: int
        """
        return self._time_stop_long_days

    @time_stop_long_days.setter
    def time_stop_long_days(self, time_stop_long_days):
        """Sets the time_stop_long_days of this Strategyteststopsandtargets.


        :param time_stop_long_days: The time_stop_long_days of this Strategyteststopsandtargets.  # noqa: E501
        :type: int
        """

        self._time_stop_long_days = time_stop_long_days

    @property
    def time_stop_short_days(self):
        """Gets the time_stop_short_days of this Strategyteststopsandtargets.  # noqa: E501


        :return: The time_stop_short_days of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: int
        """
        return self._time_stop_short_days

    @time_stop_short_days.setter
    def time_stop_short_days(self, time_stop_short_days):
        """Sets the time_stop_short_days of this Strategyteststopsandtargets.


        :param time_stop_short_days: The time_stop_short_days of this Strategyteststopsandtargets.  # noqa: E501
        :type: int
        """

        self._time_stop_short_days = time_stop_short_days

    @property
    def time_stop_exit_price_type(self):
        """Gets the time_stop_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501


        :return: The time_stop_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._time_stop_exit_price_type

    @time_stop_exit_price_type.setter
    def time_stop_exit_price_type(self, time_stop_exit_price_type):
        """Sets the time_stop_exit_price_type of this Strategyteststopsandtargets.


        :param time_stop_exit_price_type: The time_stop_exit_price_type of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._time_stop_exit_price_type = time_stop_exit_price_type

    @property
    def time_stop_exit_price_type_id(self):
        """Gets the time_stop_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501


        :return: The time_stop_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501
        :rtype: str
        """
        return self._time_stop_exit_price_type_id

    @time_stop_exit_price_type_id.setter
    def time_stop_exit_price_type_id(self, time_stop_exit_price_type_id):
        """Sets the time_stop_exit_price_type_id of this Strategyteststopsandtargets.


        :param time_stop_exit_price_type_id: The time_stop_exit_price_type_id of this Strategyteststopsandtargets.  # noqa: E501
        :type: str
        """

        self._time_stop_exit_price_type_id = time_stop_exit_price_type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Strategyteststopsandtargets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Strategyteststopsandtargets):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Strategyteststopsandtargets):
            return True

        return self.to_dict() != other.to_dict()
