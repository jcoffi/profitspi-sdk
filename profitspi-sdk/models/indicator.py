# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Indicator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'indicator_alias': 'str',
        'description': 'str',
        'short_description': 'str',
        'indicator_type_id': 'str',
        'indicator_type': 'str',
        'default_decimals': 'int',
        'indicator_parameters': 'list[Indicatorparameters]',
        'indicator_inputs': 'list[Indicatorinputs]',
        'always_prompt_for_inputs': 'bool'
    }

    attribute_map = {
        'indicator_alias': 'indicator_alias',
        'description': 'description',
        'short_description': 'short_description',
        'indicator_type_id': 'indicator_type_id',
        'indicator_type': 'indicator_type',
        'default_decimals': 'default_decimals',
        'indicator_parameters': 'indicator_parameters',
        'indicator_inputs': 'indicator_inputs',
        'always_prompt_for_inputs': 'always_prompt_for_inputs'
    }

    def __init__(self, indicator_alias=None, description=None, short_description=None, indicator_type_id=None, indicator_type=None, default_decimals=None, indicator_parameters=None, indicator_inputs=None, always_prompt_for_inputs=None, _configuration=None):  # noqa: E501
        """Indicator - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._indicator_alias = None
        self._description = None
        self._short_description = None
        self._indicator_type_id = None
        self._indicator_type = None
        self._default_decimals = None
        self._indicator_parameters = None
        self._indicator_inputs = None
        self._always_prompt_for_inputs = None
        self.discriminator = None

        if indicator_alias is not None:
            self.indicator_alias = indicator_alias
        if description is not None:
            self.description = description
        if short_description is not None:
            self.short_description = short_description
        if indicator_type_id is not None:
            self.indicator_type_id = indicator_type_id
        if indicator_type is not None:
            self.indicator_type = indicator_type
        if default_decimals is not None:
            self.default_decimals = default_decimals
        if indicator_parameters is not None:
            self.indicator_parameters = indicator_parameters
        if indicator_inputs is not None:
            self.indicator_inputs = indicator_inputs
        if always_prompt_for_inputs is not None:
            self.always_prompt_for_inputs = always_prompt_for_inputs

    @property
    def indicator_alias(self):
        """Gets the indicator_alias of this Indicator.  # noqa: E501


        :return: The indicator_alias of this Indicator.  # noqa: E501
        :rtype: str
        """
        return self._indicator_alias

    @indicator_alias.setter
    def indicator_alias(self, indicator_alias):
        """Sets the indicator_alias of this Indicator.


        :param indicator_alias: The indicator_alias of this Indicator.  # noqa: E501
        :type: str
        """

        self._indicator_alias = indicator_alias

    @property
    def description(self):
        """Gets the description of this Indicator.  # noqa: E501


        :return: The description of this Indicator.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Indicator.


        :param description: The description of this Indicator.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def short_description(self):
        """Gets the short_description of this Indicator.  # noqa: E501


        :return: The short_description of this Indicator.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Indicator.


        :param short_description: The short_description of this Indicator.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def indicator_type_id(self):
        """Gets the indicator_type_id of this Indicator.  # noqa: E501


        :return: The indicator_type_id of this Indicator.  # noqa: E501
        :rtype: str
        """
        return self._indicator_type_id

    @indicator_type_id.setter
    def indicator_type_id(self, indicator_type_id):
        """Sets the indicator_type_id of this Indicator.


        :param indicator_type_id: The indicator_type_id of this Indicator.  # noqa: E501
        :type: str
        """

        self._indicator_type_id = indicator_type_id

    @property
    def indicator_type(self):
        """Gets the indicator_type of this Indicator.  # noqa: E501


        :return: The indicator_type of this Indicator.  # noqa: E501
        :rtype: str
        """
        return self._indicator_type

    @indicator_type.setter
    def indicator_type(self, indicator_type):
        """Sets the indicator_type of this Indicator.


        :param indicator_type: The indicator_type of this Indicator.  # noqa: E501
        :type: str
        """

        self._indicator_type = indicator_type

    @property
    def default_decimals(self):
        """Gets the default_decimals of this Indicator.  # noqa: E501


        :return: The default_decimals of this Indicator.  # noqa: E501
        :rtype: int
        """
        return self._default_decimals

    @default_decimals.setter
    def default_decimals(self, default_decimals):
        """Sets the default_decimals of this Indicator.


        :param default_decimals: The default_decimals of this Indicator.  # noqa: E501
        :type: int
        """

        self._default_decimals = default_decimals

    @property
    def indicator_parameters(self):
        """Gets the indicator_parameters of this Indicator.  # noqa: E501


        :return: The indicator_parameters of this Indicator.  # noqa: E501
        :rtype: list[Indicatorparameters]
        """
        return self._indicator_parameters

    @indicator_parameters.setter
    def indicator_parameters(self, indicator_parameters):
        """Sets the indicator_parameters of this Indicator.


        :param indicator_parameters: The indicator_parameters of this Indicator.  # noqa: E501
        :type: list[Indicatorparameters]
        """

        self._indicator_parameters = indicator_parameters

    @property
    def indicator_inputs(self):
        """Gets the indicator_inputs of this Indicator.  # noqa: E501


        :return: The indicator_inputs of this Indicator.  # noqa: E501
        :rtype: list[Indicatorinputs]
        """
        return self._indicator_inputs

    @indicator_inputs.setter
    def indicator_inputs(self, indicator_inputs):
        """Sets the indicator_inputs of this Indicator.


        :param indicator_inputs: The indicator_inputs of this Indicator.  # noqa: E501
        :type: list[Indicatorinputs]
        """

        self._indicator_inputs = indicator_inputs

    @property
    def always_prompt_for_inputs(self):
        """Gets the always_prompt_for_inputs of this Indicator.  # noqa: E501


        :return: The always_prompt_for_inputs of this Indicator.  # noqa: E501
        :rtype: bool
        """
        return self._always_prompt_for_inputs

    @always_prompt_for_inputs.setter
    def always_prompt_for_inputs(self, always_prompt_for_inputs):
        """Sets the always_prompt_for_inputs of this Indicator.


        :param always_prompt_for_inputs: The always_prompt_for_inputs of this Indicator.  # noqa: E501
        :type: bool
        """

        self._always_prompt_for_inputs = always_prompt_for_inputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Indicator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Indicator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Indicator):
            return True

        return self.to_dict() != other.to_dict()
