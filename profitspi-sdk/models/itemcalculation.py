# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Itemcalculation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calc_operator': 'str',
        'description': 'str',
        'calc_value': 'str',
        'indicator_alias': 'str',
        'period_id': 'str',
        'period': 'str',
        'item_calculation_parameters': 'list[Itemcalculationparameter]',
        'bars_offset': 'int',
        'specific_instrument_id': 'int',
        'custom_inputs': 'list[Itemcustominput]'
    }

    attribute_map = {
        'calc_operator': 'calc_operator',
        'description': 'description',
        'calc_value': 'calc_value',
        'indicator_alias': 'indicator_alias',
        'period_id': 'period_id',
        'period': 'period',
        'item_calculation_parameters': 'item_calculation_parameters',
        'bars_offset': 'bars_offset',
        'specific_instrument_id': 'specific_instrument_id',
        'custom_inputs': 'custom_inputs'
    }

    def __init__(self, calc_operator=None, description=None, calc_value=None, indicator_alias=None, period_id=None, period=None, item_calculation_parameters=None, bars_offset=None, specific_instrument_id=None, custom_inputs=None, _configuration=None):  # noqa: E501
        """Itemcalculation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._calc_operator = None
        self._description = None
        self._calc_value = None
        self._indicator_alias = None
        self._period_id = None
        self._period = None
        self._item_calculation_parameters = None
        self._bars_offset = None
        self._specific_instrument_id = None
        self._custom_inputs = None
        self.discriminator = None

        if calc_operator is not None:
            self.calc_operator = calc_operator
        if description is not None:
            self.description = description
        if calc_value is not None:
            self.calc_value = calc_value
        if indicator_alias is not None:
            self.indicator_alias = indicator_alias
        if period_id is not None:
            self.period_id = period_id
        if period is not None:
            self.period = period
        if item_calculation_parameters is not None:
            self.item_calculation_parameters = item_calculation_parameters
        if bars_offset is not None:
            self.bars_offset = bars_offset
        if specific_instrument_id is not None:
            self.specific_instrument_id = specific_instrument_id
        if custom_inputs is not None:
            self.custom_inputs = custom_inputs

    @property
    def calc_operator(self):
        """Gets the calc_operator of this Itemcalculation.  # noqa: E501


        :return: The calc_operator of this Itemcalculation.  # noqa: E501
        :rtype: str
        """
        return self._calc_operator

    @calc_operator.setter
    def calc_operator(self, calc_operator):
        """Sets the calc_operator of this Itemcalculation.


        :param calc_operator: The calc_operator of this Itemcalculation.  # noqa: E501
        :type: str
        """

        self._calc_operator = calc_operator

    @property
    def description(self):
        """Gets the description of this Itemcalculation.  # noqa: E501


        :return: The description of this Itemcalculation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Itemcalculation.


        :param description: The description of this Itemcalculation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def calc_value(self):
        """Gets the calc_value of this Itemcalculation.  # noqa: E501


        :return: The calc_value of this Itemcalculation.  # noqa: E501
        :rtype: str
        """
        return self._calc_value

    @calc_value.setter
    def calc_value(self, calc_value):
        """Sets the calc_value of this Itemcalculation.


        :param calc_value: The calc_value of this Itemcalculation.  # noqa: E501
        :type: str
        """

        self._calc_value = calc_value

    @property
    def indicator_alias(self):
        """Gets the indicator_alias of this Itemcalculation.  # noqa: E501


        :return: The indicator_alias of this Itemcalculation.  # noqa: E501
        :rtype: str
        """
        return self._indicator_alias

    @indicator_alias.setter
    def indicator_alias(self, indicator_alias):
        """Sets the indicator_alias of this Itemcalculation.


        :param indicator_alias: The indicator_alias of this Itemcalculation.  # noqa: E501
        :type: str
        """

        self._indicator_alias = indicator_alias

    @property
    def period_id(self):
        """Gets the period_id of this Itemcalculation.  # noqa: E501


        :return: The period_id of this Itemcalculation.  # noqa: E501
        :rtype: str
        """
        return self._period_id

    @period_id.setter
    def period_id(self, period_id):
        """Sets the period_id of this Itemcalculation.


        :param period_id: The period_id of this Itemcalculation.  # noqa: E501
        :type: str
        """

        self._period_id = period_id

    @property
    def period(self):
        """Gets the period of this Itemcalculation.  # noqa: E501


        :return: The period of this Itemcalculation.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Itemcalculation.


        :param period: The period of this Itemcalculation.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def item_calculation_parameters(self):
        """Gets the item_calculation_parameters of this Itemcalculation.  # noqa: E501


        :return: The item_calculation_parameters of this Itemcalculation.  # noqa: E501
        :rtype: list[Itemcalculationparameter]
        """
        return self._item_calculation_parameters

    @item_calculation_parameters.setter
    def item_calculation_parameters(self, item_calculation_parameters):
        """Sets the item_calculation_parameters of this Itemcalculation.


        :param item_calculation_parameters: The item_calculation_parameters of this Itemcalculation.  # noqa: E501
        :type: list[Itemcalculationparameter]
        """

        self._item_calculation_parameters = item_calculation_parameters

    @property
    def bars_offset(self):
        """Gets the bars_offset of this Itemcalculation.  # noqa: E501


        :return: The bars_offset of this Itemcalculation.  # noqa: E501
        :rtype: int
        """
        return self._bars_offset

    @bars_offset.setter
    def bars_offset(self, bars_offset):
        """Sets the bars_offset of this Itemcalculation.


        :param bars_offset: The bars_offset of this Itemcalculation.  # noqa: E501
        :type: int
        """

        self._bars_offset = bars_offset

    @property
    def specific_instrument_id(self):
        """Gets the specific_instrument_id of this Itemcalculation.  # noqa: E501


        :return: The specific_instrument_id of this Itemcalculation.  # noqa: E501
        :rtype: int
        """
        return self._specific_instrument_id

    @specific_instrument_id.setter
    def specific_instrument_id(self, specific_instrument_id):
        """Sets the specific_instrument_id of this Itemcalculation.


        :param specific_instrument_id: The specific_instrument_id of this Itemcalculation.  # noqa: E501
        :type: int
        """

        self._specific_instrument_id = specific_instrument_id

    @property
    def custom_inputs(self):
        """Gets the custom_inputs of this Itemcalculation.  # noqa: E501


        :return: The custom_inputs of this Itemcalculation.  # noqa: E501
        :rtype: list[Itemcustominput]
        """
        return self._custom_inputs

    @custom_inputs.setter
    def custom_inputs(self, custom_inputs):
        """Sets the custom_inputs of this Itemcalculation.


        :param custom_inputs: The custom_inputs of this Itemcalculation.  # noqa: E501
        :type: list[Itemcustominput]
        """

        self._custom_inputs = custom_inputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Itemcalculation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Itemcalculation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Itemcalculation):
            return True

        return self.to_dict() != other.to_dict()
