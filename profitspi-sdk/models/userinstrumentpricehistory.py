# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Userinstrumentpricehistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instrument': 'str',
        'history_date': 'datetime',
        'open_price': 'float',
        'high_price': 'float',
        'low_price': 'float',
        'close_price': 'float',
        'volume': 'int',
        'open_interest': 'int'
    }

    attribute_map = {
        'instrument': 'instrument',
        'history_date': 'history_date',
        'open_price': 'open_price',
        'high_price': 'high_price',
        'low_price': 'low_price',
        'close_price': 'close_price',
        'volume': 'volume',
        'open_interest': 'open_interest'
    }

    def __init__(self, instrument=None, history_date=None, open_price=None, high_price=None, low_price=None, close_price=None, volume=None, open_interest=None, _configuration=None):  # noqa: E501
        """Userinstrumentpricehistory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._instrument = None
        self._history_date = None
        self._open_price = None
        self._high_price = None
        self._low_price = None
        self._close_price = None
        self._volume = None
        self._open_interest = None
        self.discriminator = None

        if instrument is not None:
            self.instrument = instrument
        if history_date is not None:
            self.history_date = history_date
        if open_price is not None:
            self.open_price = open_price
        if high_price is not None:
            self.high_price = high_price
        if low_price is not None:
            self.low_price = low_price
        if close_price is not None:
            self.close_price = close_price
        if volume is not None:
            self.volume = volume
        if open_interest is not None:
            self.open_interest = open_interest

    @property
    def instrument(self):
        """Gets the instrument of this Userinstrumentpricehistory.  # noqa: E501


        :return: The instrument of this Userinstrumentpricehistory.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this Userinstrumentpricehistory.


        :param instrument: The instrument of this Userinstrumentpricehistory.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def history_date(self):
        """Gets the history_date of this Userinstrumentpricehistory.  # noqa: E501


        :return: The history_date of this Userinstrumentpricehistory.  # noqa: E501
        :rtype: datetime
        """
        return self._history_date

    @history_date.setter
    def history_date(self, history_date):
        """Sets the history_date of this Userinstrumentpricehistory.


        :param history_date: The history_date of this Userinstrumentpricehistory.  # noqa: E501
        :type: datetime
        """

        self._history_date = history_date

    @property
    def open_price(self):
        """Gets the open_price of this Userinstrumentpricehistory.  # noqa: E501


        :return: The open_price of this Userinstrumentpricehistory.  # noqa: E501
        :rtype: float
        """
        return self._open_price

    @open_price.setter
    def open_price(self, open_price):
        """Sets the open_price of this Userinstrumentpricehistory.


        :param open_price: The open_price of this Userinstrumentpricehistory.  # noqa: E501
        :type: float
        """

        self._open_price = open_price

    @property
    def high_price(self):
        """Gets the high_price of this Userinstrumentpricehistory.  # noqa: E501


        :return: The high_price of this Userinstrumentpricehistory.  # noqa: E501
        :rtype: float
        """
        return self._high_price

    @high_price.setter
    def high_price(self, high_price):
        """Sets the high_price of this Userinstrumentpricehistory.


        :param high_price: The high_price of this Userinstrumentpricehistory.  # noqa: E501
        :type: float
        """

        self._high_price = high_price

    @property
    def low_price(self):
        """Gets the low_price of this Userinstrumentpricehistory.  # noqa: E501


        :return: The low_price of this Userinstrumentpricehistory.  # noqa: E501
        :rtype: float
        """
        return self._low_price

    @low_price.setter
    def low_price(self, low_price):
        """Sets the low_price of this Userinstrumentpricehistory.


        :param low_price: The low_price of this Userinstrumentpricehistory.  # noqa: E501
        :type: float
        """

        self._low_price = low_price

    @property
    def close_price(self):
        """Gets the close_price of this Userinstrumentpricehistory.  # noqa: E501


        :return: The close_price of this Userinstrumentpricehistory.  # noqa: E501
        :rtype: float
        """
        return self._close_price

    @close_price.setter
    def close_price(self, close_price):
        """Sets the close_price of this Userinstrumentpricehistory.


        :param close_price: The close_price of this Userinstrumentpricehistory.  # noqa: E501
        :type: float
        """

        self._close_price = close_price

    @property
    def volume(self):
        """Gets the volume of this Userinstrumentpricehistory.  # noqa: E501


        :return: The volume of this Userinstrumentpricehistory.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Userinstrumentpricehistory.


        :param volume: The volume of this Userinstrumentpricehistory.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def open_interest(self):
        """Gets the open_interest of this Userinstrumentpricehistory.  # noqa: E501


        :return: The open_interest of this Userinstrumentpricehistory.  # noqa: E501
        :rtype: int
        """
        return self._open_interest

    @open_interest.setter
    def open_interest(self, open_interest):
        """Sets the open_interest of this Userinstrumentpricehistory.


        :param open_interest: The open_interest of this Userinstrumentpricehistory.  # noqa: E501
        :type: int
        """

        self._open_interest = open_interest

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Userinstrumentpricehistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Userinstrumentpricehistory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Userinstrumentpricehistory):
            return True

        return self.to_dict() != other.to_dict()
