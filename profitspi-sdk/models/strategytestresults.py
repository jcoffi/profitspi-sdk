# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Strategytestresults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_test_date': 'datetime',
        'last_test_date': 'datetime',
        'total_profit': 'float',
        'open_profit': 'float',
        'return_on_equity_pct': 'float',
        'annualized_return_pct': 'float',
        'max_drawdown_pct': 'float',
        'sharpe_ratio': 'float',
        'total_closed_trades': 'int',
        'number_of_winner_trades': 'int',
        'number_of_loser_trades': 'int',
        'number_of_even_trades': 'int',
        'percentage_of_winner_trades': 'float',
        'winners_profit': 'float',
        'losers_profit': 'float',
        'winners_to_losers_profit_ratio': 'float',
        'largest_winner_profit': 'float',
        'largest_loser_profit': 'float',
        'average_winners_profit': 'float',
        'average_losers_profit': 'float',
        'avg_winners_to_avg_losers_profit_ratio': 'float',
        'longest_winner_days': 'int',
        'longest_loser_days': 'int',
        'total_winner_days': 'int',
        'total_loser_days': 'int',
        'average_winner_days': 'float',
        'average_loser_days': 'float',
        'most_consecutive_winners': 'int',
        'most_consecutive_losers': 'int',
        'average_total_return_pct': 'float',
        'average_trade_days': 'float',
        'average_total_return_pct_per_day': 'float',
        'average_mae_in_atrs': 'float',
        'average_winners_mae_in_atrs': 'float',
        'average_losers_mae_in_atrs': 'float',
        'average_mfe_in_atrs': 'float',
        'average_winners_mfe_in_atrs': 'float',
        'average_losers_mfe_in_atrs': 'float',
        'avg_mae_to_avg_mfe_in_atrs_ratio': 'float',
        'average_winners_return_pct': 'float',
        'average_losers_return_pct': 'float'
    }

    attribute_map = {
        'first_test_date': 'first_test_date',
        'last_test_date': 'last_test_date',
        'total_profit': 'total_profit',
        'open_profit': 'open_profit',
        'return_on_equity_pct': 'return_on_equity_pct',
        'annualized_return_pct': 'annualized_return_pct',
        'max_drawdown_pct': 'max_drawdown_pct',
        'sharpe_ratio': 'sharpe_ratio',
        'total_closed_trades': 'total_closed_trades',
        'number_of_winner_trades': 'number_of_winner_trades',
        'number_of_loser_trades': 'number_of_loser_trades',
        'number_of_even_trades': 'number_of_even_trades',
        'percentage_of_winner_trades': 'percentage_of_winner_trades',
        'winners_profit': 'winners_profit',
        'losers_profit': 'losers_profit',
        'winners_to_losers_profit_ratio': 'winners_to_losers_profit_ratio',
        'largest_winner_profit': 'largest_winner_profit',
        'largest_loser_profit': 'largest_loser_profit',
        'average_winners_profit': 'average_winners_profit',
        'average_losers_profit': 'average_losers_profit',
        'avg_winners_to_avg_losers_profit_ratio': 'avg_winners_to_avg_losers_profit_ratio',
        'longest_winner_days': 'longest_winner_days',
        'longest_loser_days': 'longest_loser_days',
        'total_winner_days': 'total_winner_days',
        'total_loser_days': 'total_loser_days',
        'average_winner_days': 'average_winner_days',
        'average_loser_days': 'average_loser_days',
        'most_consecutive_winners': 'most_consecutive_winners',
        'most_consecutive_losers': 'most_consecutive_losers',
        'average_total_return_pct': 'average_total_return_pct',
        'average_trade_days': 'average_trade_days',
        'average_total_return_pct_per_day': 'average_total_return_pct_per_day',
        'average_mae_in_atrs': 'average_mae_in_atrs',
        'average_winners_mae_in_atrs': 'average_winners_mae_in_atrs',
        'average_losers_mae_in_atrs': 'average_losers_mae_in_atrs',
        'average_mfe_in_atrs': 'average_mfe_in_atrs',
        'average_winners_mfe_in_atrs': 'average_winners_mfe_in_atrs',
        'average_losers_mfe_in_atrs': 'average_losers_mfe_in_atrs',
        'avg_mae_to_avg_mfe_in_atrs_ratio': 'avg_mae_to_avg_mfe_in_atrs_ratio',
        'average_winners_return_pct': 'average_winners_return_pct',
        'average_losers_return_pct': 'average_losers_return_pct'
    }

    def __init__(self, first_test_date=None, last_test_date=None, total_profit=None, open_profit=None, return_on_equity_pct=None, annualized_return_pct=None, max_drawdown_pct=None, sharpe_ratio=None, total_closed_trades=None, number_of_winner_trades=None, number_of_loser_trades=None, number_of_even_trades=None, percentage_of_winner_trades=None, winners_profit=None, losers_profit=None, winners_to_losers_profit_ratio=None, largest_winner_profit=None, largest_loser_profit=None, average_winners_profit=None, average_losers_profit=None, avg_winners_to_avg_losers_profit_ratio=None, longest_winner_days=None, longest_loser_days=None, total_winner_days=None, total_loser_days=None, average_winner_days=None, average_loser_days=None, most_consecutive_winners=None, most_consecutive_losers=None, average_total_return_pct=None, average_trade_days=None, average_total_return_pct_per_day=None, average_mae_in_atrs=None, average_winners_mae_in_atrs=None, average_losers_mae_in_atrs=None, average_mfe_in_atrs=None, average_winners_mfe_in_atrs=None, average_losers_mfe_in_atrs=None, avg_mae_to_avg_mfe_in_atrs_ratio=None, average_winners_return_pct=None, average_losers_return_pct=None, _configuration=None):  # noqa: E501
        """Strategytestresults - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._first_test_date = None
        self._last_test_date = None
        self._total_profit = None
        self._open_profit = None
        self._return_on_equity_pct = None
        self._annualized_return_pct = None
        self._max_drawdown_pct = None
        self._sharpe_ratio = None
        self._total_closed_trades = None
        self._number_of_winner_trades = None
        self._number_of_loser_trades = None
        self._number_of_even_trades = None
        self._percentage_of_winner_trades = None
        self._winners_profit = None
        self._losers_profit = None
        self._winners_to_losers_profit_ratio = None
        self._largest_winner_profit = None
        self._largest_loser_profit = None
        self._average_winners_profit = None
        self._average_losers_profit = None
        self._avg_winners_to_avg_losers_profit_ratio = None
        self._longest_winner_days = None
        self._longest_loser_days = None
        self._total_winner_days = None
        self._total_loser_days = None
        self._average_winner_days = None
        self._average_loser_days = None
        self._most_consecutive_winners = None
        self._most_consecutive_losers = None
        self._average_total_return_pct = None
        self._average_trade_days = None
        self._average_total_return_pct_per_day = None
        self._average_mae_in_atrs = None
        self._average_winners_mae_in_atrs = None
        self._average_losers_mae_in_atrs = None
        self._average_mfe_in_atrs = None
        self._average_winners_mfe_in_atrs = None
        self._average_losers_mfe_in_atrs = None
        self._avg_mae_to_avg_mfe_in_atrs_ratio = None
        self._average_winners_return_pct = None
        self._average_losers_return_pct = None
        self.discriminator = None

        if first_test_date is not None:
            self.first_test_date = first_test_date
        if last_test_date is not None:
            self.last_test_date = last_test_date
        if total_profit is not None:
            self.total_profit = total_profit
        if open_profit is not None:
            self.open_profit = open_profit
        if return_on_equity_pct is not None:
            self.return_on_equity_pct = return_on_equity_pct
        if annualized_return_pct is not None:
            self.annualized_return_pct = annualized_return_pct
        if max_drawdown_pct is not None:
            self.max_drawdown_pct = max_drawdown_pct
        if sharpe_ratio is not None:
            self.sharpe_ratio = sharpe_ratio
        if total_closed_trades is not None:
            self.total_closed_trades = total_closed_trades
        if number_of_winner_trades is not None:
            self.number_of_winner_trades = number_of_winner_trades
        if number_of_loser_trades is not None:
            self.number_of_loser_trades = number_of_loser_trades
        if number_of_even_trades is not None:
            self.number_of_even_trades = number_of_even_trades
        if percentage_of_winner_trades is not None:
            self.percentage_of_winner_trades = percentage_of_winner_trades
        if winners_profit is not None:
            self.winners_profit = winners_profit
        if losers_profit is not None:
            self.losers_profit = losers_profit
        if winners_to_losers_profit_ratio is not None:
            self.winners_to_losers_profit_ratio = winners_to_losers_profit_ratio
        if largest_winner_profit is not None:
            self.largest_winner_profit = largest_winner_profit
        if largest_loser_profit is not None:
            self.largest_loser_profit = largest_loser_profit
        if average_winners_profit is not None:
            self.average_winners_profit = average_winners_profit
        if average_losers_profit is not None:
            self.average_losers_profit = average_losers_profit
        if avg_winners_to_avg_losers_profit_ratio is not None:
            self.avg_winners_to_avg_losers_profit_ratio = avg_winners_to_avg_losers_profit_ratio
        if longest_winner_days is not None:
            self.longest_winner_days = longest_winner_days
        if longest_loser_days is not None:
            self.longest_loser_days = longest_loser_days
        if total_winner_days is not None:
            self.total_winner_days = total_winner_days
        if total_loser_days is not None:
            self.total_loser_days = total_loser_days
        if average_winner_days is not None:
            self.average_winner_days = average_winner_days
        if average_loser_days is not None:
            self.average_loser_days = average_loser_days
        if most_consecutive_winners is not None:
            self.most_consecutive_winners = most_consecutive_winners
        if most_consecutive_losers is not None:
            self.most_consecutive_losers = most_consecutive_losers
        if average_total_return_pct is not None:
            self.average_total_return_pct = average_total_return_pct
        if average_trade_days is not None:
            self.average_trade_days = average_trade_days
        if average_total_return_pct_per_day is not None:
            self.average_total_return_pct_per_day = average_total_return_pct_per_day
        if average_mae_in_atrs is not None:
            self.average_mae_in_atrs = average_mae_in_atrs
        if average_winners_mae_in_atrs is not None:
            self.average_winners_mae_in_atrs = average_winners_mae_in_atrs
        if average_losers_mae_in_atrs is not None:
            self.average_losers_mae_in_atrs = average_losers_mae_in_atrs
        if average_mfe_in_atrs is not None:
            self.average_mfe_in_atrs = average_mfe_in_atrs
        if average_winners_mfe_in_atrs is not None:
            self.average_winners_mfe_in_atrs = average_winners_mfe_in_atrs
        if average_losers_mfe_in_atrs is not None:
            self.average_losers_mfe_in_atrs = average_losers_mfe_in_atrs
        if avg_mae_to_avg_mfe_in_atrs_ratio is not None:
            self.avg_mae_to_avg_mfe_in_atrs_ratio = avg_mae_to_avg_mfe_in_atrs_ratio
        if average_winners_return_pct is not None:
            self.average_winners_return_pct = average_winners_return_pct
        if average_losers_return_pct is not None:
            self.average_losers_return_pct = average_losers_return_pct

    @property
    def first_test_date(self):
        """Gets the first_test_date of this Strategytestresults.  # noqa: E501


        :return: The first_test_date of this Strategytestresults.  # noqa: E501
        :rtype: datetime
        """
        return self._first_test_date

    @first_test_date.setter
    def first_test_date(self, first_test_date):
        """Sets the first_test_date of this Strategytestresults.


        :param first_test_date: The first_test_date of this Strategytestresults.  # noqa: E501
        :type: datetime
        """

        self._first_test_date = first_test_date

    @property
    def last_test_date(self):
        """Gets the last_test_date of this Strategytestresults.  # noqa: E501


        :return: The last_test_date of this Strategytestresults.  # noqa: E501
        :rtype: datetime
        """
        return self._last_test_date

    @last_test_date.setter
    def last_test_date(self, last_test_date):
        """Sets the last_test_date of this Strategytestresults.


        :param last_test_date: The last_test_date of this Strategytestresults.  # noqa: E501
        :type: datetime
        """

        self._last_test_date = last_test_date

    @property
    def total_profit(self):
        """Gets the total_profit of this Strategytestresults.  # noqa: E501


        :return: The total_profit of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._total_profit

    @total_profit.setter
    def total_profit(self, total_profit):
        """Sets the total_profit of this Strategytestresults.


        :param total_profit: The total_profit of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._total_profit = total_profit

    @property
    def open_profit(self):
        """Gets the open_profit of this Strategytestresults.  # noqa: E501


        :return: The open_profit of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._open_profit

    @open_profit.setter
    def open_profit(self, open_profit):
        """Sets the open_profit of this Strategytestresults.


        :param open_profit: The open_profit of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._open_profit = open_profit

    @property
    def return_on_equity_pct(self):
        """Gets the return_on_equity_pct of this Strategytestresults.  # noqa: E501


        :return: The return_on_equity_pct of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._return_on_equity_pct

    @return_on_equity_pct.setter
    def return_on_equity_pct(self, return_on_equity_pct):
        """Sets the return_on_equity_pct of this Strategytestresults.


        :param return_on_equity_pct: The return_on_equity_pct of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._return_on_equity_pct = return_on_equity_pct

    @property
    def annualized_return_pct(self):
        """Gets the annualized_return_pct of this Strategytestresults.  # noqa: E501


        :return: The annualized_return_pct of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._annualized_return_pct

    @annualized_return_pct.setter
    def annualized_return_pct(self, annualized_return_pct):
        """Sets the annualized_return_pct of this Strategytestresults.


        :param annualized_return_pct: The annualized_return_pct of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._annualized_return_pct = annualized_return_pct

    @property
    def max_drawdown_pct(self):
        """Gets the max_drawdown_pct of this Strategytestresults.  # noqa: E501


        :return: The max_drawdown_pct of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._max_drawdown_pct

    @max_drawdown_pct.setter
    def max_drawdown_pct(self, max_drawdown_pct):
        """Sets the max_drawdown_pct of this Strategytestresults.


        :param max_drawdown_pct: The max_drawdown_pct of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._max_drawdown_pct = max_drawdown_pct

    @property
    def sharpe_ratio(self):
        """Gets the sharpe_ratio of this Strategytestresults.  # noqa: E501


        :return: The sharpe_ratio of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._sharpe_ratio

    @sharpe_ratio.setter
    def sharpe_ratio(self, sharpe_ratio):
        """Sets the sharpe_ratio of this Strategytestresults.


        :param sharpe_ratio: The sharpe_ratio of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._sharpe_ratio = sharpe_ratio

    @property
    def total_closed_trades(self):
        """Gets the total_closed_trades of this Strategytestresults.  # noqa: E501


        :return: The total_closed_trades of this Strategytestresults.  # noqa: E501
        :rtype: int
        """
        return self._total_closed_trades

    @total_closed_trades.setter
    def total_closed_trades(self, total_closed_trades):
        """Sets the total_closed_trades of this Strategytestresults.


        :param total_closed_trades: The total_closed_trades of this Strategytestresults.  # noqa: E501
        :type: int
        """

        self._total_closed_trades = total_closed_trades

    @property
    def number_of_winner_trades(self):
        """Gets the number_of_winner_trades of this Strategytestresults.  # noqa: E501


        :return: The number_of_winner_trades of this Strategytestresults.  # noqa: E501
        :rtype: int
        """
        return self._number_of_winner_trades

    @number_of_winner_trades.setter
    def number_of_winner_trades(self, number_of_winner_trades):
        """Sets the number_of_winner_trades of this Strategytestresults.


        :param number_of_winner_trades: The number_of_winner_trades of this Strategytestresults.  # noqa: E501
        :type: int
        """

        self._number_of_winner_trades = number_of_winner_trades

    @property
    def number_of_loser_trades(self):
        """Gets the number_of_loser_trades of this Strategytestresults.  # noqa: E501


        :return: The number_of_loser_trades of this Strategytestresults.  # noqa: E501
        :rtype: int
        """
        return self._number_of_loser_trades

    @number_of_loser_trades.setter
    def number_of_loser_trades(self, number_of_loser_trades):
        """Sets the number_of_loser_trades of this Strategytestresults.


        :param number_of_loser_trades: The number_of_loser_trades of this Strategytestresults.  # noqa: E501
        :type: int
        """

        self._number_of_loser_trades = number_of_loser_trades

    @property
    def number_of_even_trades(self):
        """Gets the number_of_even_trades of this Strategytestresults.  # noqa: E501


        :return: The number_of_even_trades of this Strategytestresults.  # noqa: E501
        :rtype: int
        """
        return self._number_of_even_trades

    @number_of_even_trades.setter
    def number_of_even_trades(self, number_of_even_trades):
        """Sets the number_of_even_trades of this Strategytestresults.


        :param number_of_even_trades: The number_of_even_trades of this Strategytestresults.  # noqa: E501
        :type: int
        """

        self._number_of_even_trades = number_of_even_trades

    @property
    def percentage_of_winner_trades(self):
        """Gets the percentage_of_winner_trades of this Strategytestresults.  # noqa: E501


        :return: The percentage_of_winner_trades of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._percentage_of_winner_trades

    @percentage_of_winner_trades.setter
    def percentage_of_winner_trades(self, percentage_of_winner_trades):
        """Sets the percentage_of_winner_trades of this Strategytestresults.


        :param percentage_of_winner_trades: The percentage_of_winner_trades of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._percentage_of_winner_trades = percentage_of_winner_trades

    @property
    def winners_profit(self):
        """Gets the winners_profit of this Strategytestresults.  # noqa: E501


        :return: The winners_profit of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._winners_profit

    @winners_profit.setter
    def winners_profit(self, winners_profit):
        """Sets the winners_profit of this Strategytestresults.


        :param winners_profit: The winners_profit of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._winners_profit = winners_profit

    @property
    def losers_profit(self):
        """Gets the losers_profit of this Strategytestresults.  # noqa: E501


        :return: The losers_profit of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._losers_profit

    @losers_profit.setter
    def losers_profit(self, losers_profit):
        """Sets the losers_profit of this Strategytestresults.


        :param losers_profit: The losers_profit of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._losers_profit = losers_profit

    @property
    def winners_to_losers_profit_ratio(self):
        """Gets the winners_to_losers_profit_ratio of this Strategytestresults.  # noqa: E501


        :return: The winners_to_losers_profit_ratio of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._winners_to_losers_profit_ratio

    @winners_to_losers_profit_ratio.setter
    def winners_to_losers_profit_ratio(self, winners_to_losers_profit_ratio):
        """Sets the winners_to_losers_profit_ratio of this Strategytestresults.


        :param winners_to_losers_profit_ratio: The winners_to_losers_profit_ratio of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._winners_to_losers_profit_ratio = winners_to_losers_profit_ratio

    @property
    def largest_winner_profit(self):
        """Gets the largest_winner_profit of this Strategytestresults.  # noqa: E501


        :return: The largest_winner_profit of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._largest_winner_profit

    @largest_winner_profit.setter
    def largest_winner_profit(self, largest_winner_profit):
        """Sets the largest_winner_profit of this Strategytestresults.


        :param largest_winner_profit: The largest_winner_profit of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._largest_winner_profit = largest_winner_profit

    @property
    def largest_loser_profit(self):
        """Gets the largest_loser_profit of this Strategytestresults.  # noqa: E501


        :return: The largest_loser_profit of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._largest_loser_profit

    @largest_loser_profit.setter
    def largest_loser_profit(self, largest_loser_profit):
        """Sets the largest_loser_profit of this Strategytestresults.


        :param largest_loser_profit: The largest_loser_profit of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._largest_loser_profit = largest_loser_profit

    @property
    def average_winners_profit(self):
        """Gets the average_winners_profit of this Strategytestresults.  # noqa: E501


        :return: The average_winners_profit of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_winners_profit

    @average_winners_profit.setter
    def average_winners_profit(self, average_winners_profit):
        """Sets the average_winners_profit of this Strategytestresults.


        :param average_winners_profit: The average_winners_profit of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_winners_profit = average_winners_profit

    @property
    def average_losers_profit(self):
        """Gets the average_losers_profit of this Strategytestresults.  # noqa: E501


        :return: The average_losers_profit of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_losers_profit

    @average_losers_profit.setter
    def average_losers_profit(self, average_losers_profit):
        """Sets the average_losers_profit of this Strategytestresults.


        :param average_losers_profit: The average_losers_profit of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_losers_profit = average_losers_profit

    @property
    def avg_winners_to_avg_losers_profit_ratio(self):
        """Gets the avg_winners_to_avg_losers_profit_ratio of this Strategytestresults.  # noqa: E501


        :return: The avg_winners_to_avg_losers_profit_ratio of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._avg_winners_to_avg_losers_profit_ratio

    @avg_winners_to_avg_losers_profit_ratio.setter
    def avg_winners_to_avg_losers_profit_ratio(self, avg_winners_to_avg_losers_profit_ratio):
        """Sets the avg_winners_to_avg_losers_profit_ratio of this Strategytestresults.


        :param avg_winners_to_avg_losers_profit_ratio: The avg_winners_to_avg_losers_profit_ratio of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._avg_winners_to_avg_losers_profit_ratio = avg_winners_to_avg_losers_profit_ratio

    @property
    def longest_winner_days(self):
        """Gets the longest_winner_days of this Strategytestresults.  # noqa: E501


        :return: The longest_winner_days of this Strategytestresults.  # noqa: E501
        :rtype: int
        """
        return self._longest_winner_days

    @longest_winner_days.setter
    def longest_winner_days(self, longest_winner_days):
        """Sets the longest_winner_days of this Strategytestresults.


        :param longest_winner_days: The longest_winner_days of this Strategytestresults.  # noqa: E501
        :type: int
        """

        self._longest_winner_days = longest_winner_days

    @property
    def longest_loser_days(self):
        """Gets the longest_loser_days of this Strategytestresults.  # noqa: E501


        :return: The longest_loser_days of this Strategytestresults.  # noqa: E501
        :rtype: int
        """
        return self._longest_loser_days

    @longest_loser_days.setter
    def longest_loser_days(self, longest_loser_days):
        """Sets the longest_loser_days of this Strategytestresults.


        :param longest_loser_days: The longest_loser_days of this Strategytestresults.  # noqa: E501
        :type: int
        """

        self._longest_loser_days = longest_loser_days

    @property
    def total_winner_days(self):
        """Gets the total_winner_days of this Strategytestresults.  # noqa: E501


        :return: The total_winner_days of this Strategytestresults.  # noqa: E501
        :rtype: int
        """
        return self._total_winner_days

    @total_winner_days.setter
    def total_winner_days(self, total_winner_days):
        """Sets the total_winner_days of this Strategytestresults.


        :param total_winner_days: The total_winner_days of this Strategytestresults.  # noqa: E501
        :type: int
        """

        self._total_winner_days = total_winner_days

    @property
    def total_loser_days(self):
        """Gets the total_loser_days of this Strategytestresults.  # noqa: E501


        :return: The total_loser_days of this Strategytestresults.  # noqa: E501
        :rtype: int
        """
        return self._total_loser_days

    @total_loser_days.setter
    def total_loser_days(self, total_loser_days):
        """Sets the total_loser_days of this Strategytestresults.


        :param total_loser_days: The total_loser_days of this Strategytestresults.  # noqa: E501
        :type: int
        """

        self._total_loser_days = total_loser_days

    @property
    def average_winner_days(self):
        """Gets the average_winner_days of this Strategytestresults.  # noqa: E501


        :return: The average_winner_days of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_winner_days

    @average_winner_days.setter
    def average_winner_days(self, average_winner_days):
        """Sets the average_winner_days of this Strategytestresults.


        :param average_winner_days: The average_winner_days of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_winner_days = average_winner_days

    @property
    def average_loser_days(self):
        """Gets the average_loser_days of this Strategytestresults.  # noqa: E501


        :return: The average_loser_days of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_loser_days

    @average_loser_days.setter
    def average_loser_days(self, average_loser_days):
        """Sets the average_loser_days of this Strategytestresults.


        :param average_loser_days: The average_loser_days of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_loser_days = average_loser_days

    @property
    def most_consecutive_winners(self):
        """Gets the most_consecutive_winners of this Strategytestresults.  # noqa: E501


        :return: The most_consecutive_winners of this Strategytestresults.  # noqa: E501
        :rtype: int
        """
        return self._most_consecutive_winners

    @most_consecutive_winners.setter
    def most_consecutive_winners(self, most_consecutive_winners):
        """Sets the most_consecutive_winners of this Strategytestresults.


        :param most_consecutive_winners: The most_consecutive_winners of this Strategytestresults.  # noqa: E501
        :type: int
        """

        self._most_consecutive_winners = most_consecutive_winners

    @property
    def most_consecutive_losers(self):
        """Gets the most_consecutive_losers of this Strategytestresults.  # noqa: E501


        :return: The most_consecutive_losers of this Strategytestresults.  # noqa: E501
        :rtype: int
        """
        return self._most_consecutive_losers

    @most_consecutive_losers.setter
    def most_consecutive_losers(self, most_consecutive_losers):
        """Sets the most_consecutive_losers of this Strategytestresults.


        :param most_consecutive_losers: The most_consecutive_losers of this Strategytestresults.  # noqa: E501
        :type: int
        """

        self._most_consecutive_losers = most_consecutive_losers

    @property
    def average_total_return_pct(self):
        """Gets the average_total_return_pct of this Strategytestresults.  # noqa: E501


        :return: The average_total_return_pct of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_total_return_pct

    @average_total_return_pct.setter
    def average_total_return_pct(self, average_total_return_pct):
        """Sets the average_total_return_pct of this Strategytestresults.


        :param average_total_return_pct: The average_total_return_pct of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_total_return_pct = average_total_return_pct

    @property
    def average_trade_days(self):
        """Gets the average_trade_days of this Strategytestresults.  # noqa: E501


        :return: The average_trade_days of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_trade_days

    @average_trade_days.setter
    def average_trade_days(self, average_trade_days):
        """Sets the average_trade_days of this Strategytestresults.


        :param average_trade_days: The average_trade_days of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_trade_days = average_trade_days

    @property
    def average_total_return_pct_per_day(self):
        """Gets the average_total_return_pct_per_day of this Strategytestresults.  # noqa: E501


        :return: The average_total_return_pct_per_day of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_total_return_pct_per_day

    @average_total_return_pct_per_day.setter
    def average_total_return_pct_per_day(self, average_total_return_pct_per_day):
        """Sets the average_total_return_pct_per_day of this Strategytestresults.


        :param average_total_return_pct_per_day: The average_total_return_pct_per_day of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_total_return_pct_per_day = average_total_return_pct_per_day

    @property
    def average_mae_in_atrs(self):
        """Gets the average_mae_in_atrs of this Strategytestresults.  # noqa: E501


        :return: The average_mae_in_atrs of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_mae_in_atrs

    @average_mae_in_atrs.setter
    def average_mae_in_atrs(self, average_mae_in_atrs):
        """Sets the average_mae_in_atrs of this Strategytestresults.


        :param average_mae_in_atrs: The average_mae_in_atrs of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_mae_in_atrs = average_mae_in_atrs

    @property
    def average_winners_mae_in_atrs(self):
        """Gets the average_winners_mae_in_atrs of this Strategytestresults.  # noqa: E501


        :return: The average_winners_mae_in_atrs of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_winners_mae_in_atrs

    @average_winners_mae_in_atrs.setter
    def average_winners_mae_in_atrs(self, average_winners_mae_in_atrs):
        """Sets the average_winners_mae_in_atrs of this Strategytestresults.


        :param average_winners_mae_in_atrs: The average_winners_mae_in_atrs of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_winners_mae_in_atrs = average_winners_mae_in_atrs

    @property
    def average_losers_mae_in_atrs(self):
        """Gets the average_losers_mae_in_atrs of this Strategytestresults.  # noqa: E501


        :return: The average_losers_mae_in_atrs of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_losers_mae_in_atrs

    @average_losers_mae_in_atrs.setter
    def average_losers_mae_in_atrs(self, average_losers_mae_in_atrs):
        """Sets the average_losers_mae_in_atrs of this Strategytestresults.


        :param average_losers_mae_in_atrs: The average_losers_mae_in_atrs of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_losers_mae_in_atrs = average_losers_mae_in_atrs

    @property
    def average_mfe_in_atrs(self):
        """Gets the average_mfe_in_atrs of this Strategytestresults.  # noqa: E501


        :return: The average_mfe_in_atrs of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_mfe_in_atrs

    @average_mfe_in_atrs.setter
    def average_mfe_in_atrs(self, average_mfe_in_atrs):
        """Sets the average_mfe_in_atrs of this Strategytestresults.


        :param average_mfe_in_atrs: The average_mfe_in_atrs of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_mfe_in_atrs = average_mfe_in_atrs

    @property
    def average_winners_mfe_in_atrs(self):
        """Gets the average_winners_mfe_in_atrs of this Strategytestresults.  # noqa: E501


        :return: The average_winners_mfe_in_atrs of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_winners_mfe_in_atrs

    @average_winners_mfe_in_atrs.setter
    def average_winners_mfe_in_atrs(self, average_winners_mfe_in_atrs):
        """Sets the average_winners_mfe_in_atrs of this Strategytestresults.


        :param average_winners_mfe_in_atrs: The average_winners_mfe_in_atrs of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_winners_mfe_in_atrs = average_winners_mfe_in_atrs

    @property
    def average_losers_mfe_in_atrs(self):
        """Gets the average_losers_mfe_in_atrs of this Strategytestresults.  # noqa: E501


        :return: The average_losers_mfe_in_atrs of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_losers_mfe_in_atrs

    @average_losers_mfe_in_atrs.setter
    def average_losers_mfe_in_atrs(self, average_losers_mfe_in_atrs):
        """Sets the average_losers_mfe_in_atrs of this Strategytestresults.


        :param average_losers_mfe_in_atrs: The average_losers_mfe_in_atrs of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_losers_mfe_in_atrs = average_losers_mfe_in_atrs

    @property
    def avg_mae_to_avg_mfe_in_atrs_ratio(self):
        """Gets the avg_mae_to_avg_mfe_in_atrs_ratio of this Strategytestresults.  # noqa: E501


        :return: The avg_mae_to_avg_mfe_in_atrs_ratio of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._avg_mae_to_avg_mfe_in_atrs_ratio

    @avg_mae_to_avg_mfe_in_atrs_ratio.setter
    def avg_mae_to_avg_mfe_in_atrs_ratio(self, avg_mae_to_avg_mfe_in_atrs_ratio):
        """Sets the avg_mae_to_avg_mfe_in_atrs_ratio of this Strategytestresults.


        :param avg_mae_to_avg_mfe_in_atrs_ratio: The avg_mae_to_avg_mfe_in_atrs_ratio of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._avg_mae_to_avg_mfe_in_atrs_ratio = avg_mae_to_avg_mfe_in_atrs_ratio

    @property
    def average_winners_return_pct(self):
        """Gets the average_winners_return_pct of this Strategytestresults.  # noqa: E501


        :return: The average_winners_return_pct of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_winners_return_pct

    @average_winners_return_pct.setter
    def average_winners_return_pct(self, average_winners_return_pct):
        """Sets the average_winners_return_pct of this Strategytestresults.


        :param average_winners_return_pct: The average_winners_return_pct of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_winners_return_pct = average_winners_return_pct

    @property
    def average_losers_return_pct(self):
        """Gets the average_losers_return_pct of this Strategytestresults.  # noqa: E501


        :return: The average_losers_return_pct of this Strategytestresults.  # noqa: E501
        :rtype: float
        """
        return self._average_losers_return_pct

    @average_losers_return_pct.setter
    def average_losers_return_pct(self, average_losers_return_pct):
        """Sets the average_losers_return_pct of this Strategytestresults.


        :param average_losers_return_pct: The average_losers_return_pct of this Strategytestresults.  # noqa: E501
        :type: float
        """

        self._average_losers_return_pct = average_losers_return_pct

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Strategytestresults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Strategytestresults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Strategytestresults):
            return True

        return self.to_dict() != other.to_dict()
