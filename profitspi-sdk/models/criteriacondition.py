# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Criteriacondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition_id': 'str',
        'condition': 'str',
        'condition_short_desc': 'str',
        'right_side_required': 'bool',
        'bars_required': 'bool'
    }

    attribute_map = {
        'condition_id': 'condition_id',
        'condition': 'condition',
        'condition_short_desc': 'condition_short_desc',
        'right_side_required': 'right_side_required',
        'bars_required': 'bars_required'
    }

    def __init__(self, condition_id=None, condition=None, condition_short_desc=None, right_side_required=None, bars_required=None, _configuration=None):  # noqa: E501
        """Criteriacondition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._condition_id = None
        self._condition = None
        self._condition_short_desc = None
        self._right_side_required = None
        self._bars_required = None
        self.discriminator = None

        if condition_id is not None:
            self.condition_id = condition_id
        if condition is not None:
            self.condition = condition
        if condition_short_desc is not None:
            self.condition_short_desc = condition_short_desc
        if right_side_required is not None:
            self.right_side_required = right_side_required
        if bars_required is not None:
            self.bars_required = bars_required

    @property
    def condition_id(self):
        """Gets the condition_id of this Criteriacondition.  # noqa: E501


        :return: The condition_id of this Criteriacondition.  # noqa: E501
        :rtype: str
        """
        return self._condition_id

    @condition_id.setter
    def condition_id(self, condition_id):
        """Sets the condition_id of this Criteriacondition.


        :param condition_id: The condition_id of this Criteriacondition.  # noqa: E501
        :type: str
        """

        self._condition_id = condition_id

    @property
    def condition(self):
        """Gets the condition of this Criteriacondition.  # noqa: E501


        :return: The condition of this Criteriacondition.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Criteriacondition.


        :param condition: The condition of this Criteriacondition.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def condition_short_desc(self):
        """Gets the condition_short_desc of this Criteriacondition.  # noqa: E501


        :return: The condition_short_desc of this Criteriacondition.  # noqa: E501
        :rtype: str
        """
        return self._condition_short_desc

    @condition_short_desc.setter
    def condition_short_desc(self, condition_short_desc):
        """Sets the condition_short_desc of this Criteriacondition.


        :param condition_short_desc: The condition_short_desc of this Criteriacondition.  # noqa: E501
        :type: str
        """

        self._condition_short_desc = condition_short_desc

    @property
    def right_side_required(self):
        """Gets the right_side_required of this Criteriacondition.  # noqa: E501


        :return: The right_side_required of this Criteriacondition.  # noqa: E501
        :rtype: bool
        """
        return self._right_side_required

    @right_side_required.setter
    def right_side_required(self, right_side_required):
        """Sets the right_side_required of this Criteriacondition.


        :param right_side_required: The right_side_required of this Criteriacondition.  # noqa: E501
        :type: bool
        """

        self._right_side_required = right_side_required

    @property
    def bars_required(self):
        """Gets the bars_required of this Criteriacondition.  # noqa: E501


        :return: The bars_required of this Criteriacondition.  # noqa: E501
        :rtype: bool
        """
        return self._bars_required

    @bars_required.setter
    def bars_required(self, bars_required):
        """Sets the bars_required of this Criteriacondition.


        :param bars_required: The bars_required of this Criteriacondition.  # noqa: E501
        :type: bool
        """

        self._bars_required = bars_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Criteriacondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Criteriacondition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Criteriacondition):
            return True

        return self.to_dict() != other.to_dict()
