# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Strategytestperiod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_period_text': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'days_in_test': 'int',
        'days_to_test_code': 'str'
    }

    attribute_map = {
        'test_period_text': 'test_period_text',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'days_in_test': 'days_in_test',
        'days_to_test_code': 'days_to_test_code'
    }

    def __init__(self, test_period_text=None, start_date=None, end_date=None, days_in_test=None, days_to_test_code=None, _configuration=None):  # noqa: E501
        """Strategytestperiod - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._test_period_text = None
        self._start_date = None
        self._end_date = None
        self._days_in_test = None
        self._days_to_test_code = None
        self.discriminator = None

        if test_period_text is not None:
            self.test_period_text = test_period_text
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if days_in_test is not None:
            self.days_in_test = days_in_test
        if days_to_test_code is not None:
            self.days_to_test_code = days_to_test_code

    @property
    def test_period_text(self):
        """Gets the test_period_text of this Strategytestperiod.  # noqa: E501


        :return: The test_period_text of this Strategytestperiod.  # noqa: E501
        :rtype: str
        """
        return self._test_period_text

    @test_period_text.setter
    def test_period_text(self, test_period_text):
        """Sets the test_period_text of this Strategytestperiod.


        :param test_period_text: The test_period_text of this Strategytestperiod.  # noqa: E501
        :type: str
        """

        self._test_period_text = test_period_text

    @property
    def start_date(self):
        """Gets the start_date of this Strategytestperiod.  # noqa: E501


        :return: The start_date of this Strategytestperiod.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Strategytestperiod.


        :param start_date: The start_date of this Strategytestperiod.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Strategytestperiod.  # noqa: E501


        :return: The end_date of this Strategytestperiod.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Strategytestperiod.


        :param end_date: The end_date of this Strategytestperiod.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def days_in_test(self):
        """Gets the days_in_test of this Strategytestperiod.  # noqa: E501


        :return: The days_in_test of this Strategytestperiod.  # noqa: E501
        :rtype: int
        """
        return self._days_in_test

    @days_in_test.setter
    def days_in_test(self, days_in_test):
        """Sets the days_in_test of this Strategytestperiod.


        :param days_in_test: The days_in_test of this Strategytestperiod.  # noqa: E501
        :type: int
        """

        self._days_in_test = days_in_test

    @property
    def days_to_test_code(self):
        """Gets the days_to_test_code of this Strategytestperiod.  # noqa: E501


        :return: The days_to_test_code of this Strategytestperiod.  # noqa: E501
        :rtype: str
        """
        return self._days_to_test_code

    @days_to_test_code.setter
    def days_to_test_code(self, days_to_test_code):
        """Sets the days_to_test_code of this Strategytestperiod.


        :param days_to_test_code: The days_to_test_code of this Strategytestperiod.  # noqa: E501
        :type: str
        """

        self._days_to_test_code = days_to_test_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Strategytestperiod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Strategytestperiod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Strategytestperiod):
            return True

        return self.to_dict() != other.to_dict()
