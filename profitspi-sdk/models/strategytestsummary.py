# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Strategytestsummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'strategy_id': 'int',
        'test_num': 'int',
        'run_datetime': 'datetime',
        'test_status': 'str',
        'percent_complete': 'float',
        'instrument_group_text': 'str',
        'criteria_text': 'str',
        'test_period_text': 'str',
        'position_sizing_text': 'str',
        'max_positions_text': 'str',
        'prioritize_text': 'str',
        'enter_exit_position_text': 'str',
        'stop_loss_text': 'str',
        'trailing_stop_loss_text': 'str',
        'target_text': 'str',
        'time_stop_text': 'str',
        'costs_text': 'str',
        'test_results': 'Strategytestresults'
    }

    attribute_map = {
        'strategy_id': 'strategy_id',
        'test_num': 'test_num',
        'run_datetime': 'run_datetime',
        'test_status': 'test_status',
        'percent_complete': 'percent_complete',
        'instrument_group_text': 'instrument_group_text',
        'criteria_text': 'criteria_text',
        'test_period_text': 'test_period_text',
        'position_sizing_text': 'position_sizing_text',
        'max_positions_text': 'max_positions_text',
        'prioritize_text': 'prioritize_text',
        'enter_exit_position_text': 'enter_exit_position_text',
        'stop_loss_text': 'stop_loss_text',
        'trailing_stop_loss_text': 'trailing_stop_loss_text',
        'target_text': 'target_text',
        'time_stop_text': 'time_stop_text',
        'costs_text': 'costs_text',
        'test_results': 'test_results'
    }

    def __init__(self, strategy_id=None, test_num=None, run_datetime=None, test_status=None, percent_complete=None, instrument_group_text=None, criteria_text=None, test_period_text=None, position_sizing_text=None, max_positions_text=None, prioritize_text=None, enter_exit_position_text=None, stop_loss_text=None, trailing_stop_loss_text=None, target_text=None, time_stop_text=None, costs_text=None, test_results=None, _configuration=None):  # noqa: E501
        """Strategytestsummary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._strategy_id = None
        self._test_num = None
        self._run_datetime = None
        self._test_status = None
        self._percent_complete = None
        self._instrument_group_text = None
        self._criteria_text = None
        self._test_period_text = None
        self._position_sizing_text = None
        self._max_positions_text = None
        self._prioritize_text = None
        self._enter_exit_position_text = None
        self._stop_loss_text = None
        self._trailing_stop_loss_text = None
        self._target_text = None
        self._time_stop_text = None
        self._costs_text = None
        self._test_results = None
        self.discriminator = None

        if strategy_id is not None:
            self.strategy_id = strategy_id
        if test_num is not None:
            self.test_num = test_num
        if run_datetime is not None:
            self.run_datetime = run_datetime
        if test_status is not None:
            self.test_status = test_status
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if instrument_group_text is not None:
            self.instrument_group_text = instrument_group_text
        if criteria_text is not None:
            self.criteria_text = criteria_text
        if test_period_text is not None:
            self.test_period_text = test_period_text
        if position_sizing_text is not None:
            self.position_sizing_text = position_sizing_text
        if max_positions_text is not None:
            self.max_positions_text = max_positions_text
        if prioritize_text is not None:
            self.prioritize_text = prioritize_text
        if enter_exit_position_text is not None:
            self.enter_exit_position_text = enter_exit_position_text
        if stop_loss_text is not None:
            self.stop_loss_text = stop_loss_text
        if trailing_stop_loss_text is not None:
            self.trailing_stop_loss_text = trailing_stop_loss_text
        if target_text is not None:
            self.target_text = target_text
        if time_stop_text is not None:
            self.time_stop_text = time_stop_text
        if costs_text is not None:
            self.costs_text = costs_text
        if test_results is not None:
            self.test_results = test_results

    @property
    def strategy_id(self):
        """Gets the strategy_id of this Strategytestsummary.  # noqa: E501


        :return: The strategy_id of this Strategytestsummary.  # noqa: E501
        :rtype: int
        """
        return self._strategy_id

    @strategy_id.setter
    def strategy_id(self, strategy_id):
        """Sets the strategy_id of this Strategytestsummary.


        :param strategy_id: The strategy_id of this Strategytestsummary.  # noqa: E501
        :type: int
        """

        self._strategy_id = strategy_id

    @property
    def test_num(self):
        """Gets the test_num of this Strategytestsummary.  # noqa: E501


        :return: The test_num of this Strategytestsummary.  # noqa: E501
        :rtype: int
        """
        return self._test_num

    @test_num.setter
    def test_num(self, test_num):
        """Sets the test_num of this Strategytestsummary.


        :param test_num: The test_num of this Strategytestsummary.  # noqa: E501
        :type: int
        """

        self._test_num = test_num

    @property
    def run_datetime(self):
        """Gets the run_datetime of this Strategytestsummary.  # noqa: E501


        :return: The run_datetime of this Strategytestsummary.  # noqa: E501
        :rtype: datetime
        """
        return self._run_datetime

    @run_datetime.setter
    def run_datetime(self, run_datetime):
        """Sets the run_datetime of this Strategytestsummary.


        :param run_datetime: The run_datetime of this Strategytestsummary.  # noqa: E501
        :type: datetime
        """

        self._run_datetime = run_datetime

    @property
    def test_status(self):
        """Gets the test_status of this Strategytestsummary.  # noqa: E501


        :return: The test_status of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._test_status

    @test_status.setter
    def test_status(self, test_status):
        """Sets the test_status of this Strategytestsummary.


        :param test_status: The test_status of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._test_status = test_status

    @property
    def percent_complete(self):
        """Gets the percent_complete of this Strategytestsummary.  # noqa: E501


        :return: The percent_complete of this Strategytestsummary.  # noqa: E501
        :rtype: float
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this Strategytestsummary.


        :param percent_complete: The percent_complete of this Strategytestsummary.  # noqa: E501
        :type: float
        """

        self._percent_complete = percent_complete

    @property
    def instrument_group_text(self):
        """Gets the instrument_group_text of this Strategytestsummary.  # noqa: E501


        :return: The instrument_group_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._instrument_group_text

    @instrument_group_text.setter
    def instrument_group_text(self, instrument_group_text):
        """Sets the instrument_group_text of this Strategytestsummary.


        :param instrument_group_text: The instrument_group_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._instrument_group_text = instrument_group_text

    @property
    def criteria_text(self):
        """Gets the criteria_text of this Strategytestsummary.  # noqa: E501


        :return: The criteria_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._criteria_text

    @criteria_text.setter
    def criteria_text(self, criteria_text):
        """Sets the criteria_text of this Strategytestsummary.


        :param criteria_text: The criteria_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._criteria_text = criteria_text

    @property
    def test_period_text(self):
        """Gets the test_period_text of this Strategytestsummary.  # noqa: E501


        :return: The test_period_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._test_period_text

    @test_period_text.setter
    def test_period_text(self, test_period_text):
        """Sets the test_period_text of this Strategytestsummary.


        :param test_period_text: The test_period_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._test_period_text = test_period_text

    @property
    def position_sizing_text(self):
        """Gets the position_sizing_text of this Strategytestsummary.  # noqa: E501


        :return: The position_sizing_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._position_sizing_text

    @position_sizing_text.setter
    def position_sizing_text(self, position_sizing_text):
        """Sets the position_sizing_text of this Strategytestsummary.


        :param position_sizing_text: The position_sizing_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._position_sizing_text = position_sizing_text

    @property
    def max_positions_text(self):
        """Gets the max_positions_text of this Strategytestsummary.  # noqa: E501


        :return: The max_positions_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._max_positions_text

    @max_positions_text.setter
    def max_positions_text(self, max_positions_text):
        """Sets the max_positions_text of this Strategytestsummary.


        :param max_positions_text: The max_positions_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._max_positions_text = max_positions_text

    @property
    def prioritize_text(self):
        """Gets the prioritize_text of this Strategytestsummary.  # noqa: E501


        :return: The prioritize_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._prioritize_text

    @prioritize_text.setter
    def prioritize_text(self, prioritize_text):
        """Sets the prioritize_text of this Strategytestsummary.


        :param prioritize_text: The prioritize_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._prioritize_text = prioritize_text

    @property
    def enter_exit_position_text(self):
        """Gets the enter_exit_position_text of this Strategytestsummary.  # noqa: E501


        :return: The enter_exit_position_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._enter_exit_position_text

    @enter_exit_position_text.setter
    def enter_exit_position_text(self, enter_exit_position_text):
        """Sets the enter_exit_position_text of this Strategytestsummary.


        :param enter_exit_position_text: The enter_exit_position_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._enter_exit_position_text = enter_exit_position_text

    @property
    def stop_loss_text(self):
        """Gets the stop_loss_text of this Strategytestsummary.  # noqa: E501


        :return: The stop_loss_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._stop_loss_text

    @stop_loss_text.setter
    def stop_loss_text(self, stop_loss_text):
        """Sets the stop_loss_text of this Strategytestsummary.


        :param stop_loss_text: The stop_loss_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._stop_loss_text = stop_loss_text

    @property
    def trailing_stop_loss_text(self):
        """Gets the trailing_stop_loss_text of this Strategytestsummary.  # noqa: E501


        :return: The trailing_stop_loss_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._trailing_stop_loss_text

    @trailing_stop_loss_text.setter
    def trailing_stop_loss_text(self, trailing_stop_loss_text):
        """Sets the trailing_stop_loss_text of this Strategytestsummary.


        :param trailing_stop_loss_text: The trailing_stop_loss_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._trailing_stop_loss_text = trailing_stop_loss_text

    @property
    def target_text(self):
        """Gets the target_text of this Strategytestsummary.  # noqa: E501


        :return: The target_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._target_text

    @target_text.setter
    def target_text(self, target_text):
        """Sets the target_text of this Strategytestsummary.


        :param target_text: The target_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._target_text = target_text

    @property
    def time_stop_text(self):
        """Gets the time_stop_text of this Strategytestsummary.  # noqa: E501


        :return: The time_stop_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._time_stop_text

    @time_stop_text.setter
    def time_stop_text(self, time_stop_text):
        """Sets the time_stop_text of this Strategytestsummary.


        :param time_stop_text: The time_stop_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._time_stop_text = time_stop_text

    @property
    def costs_text(self):
        """Gets the costs_text of this Strategytestsummary.  # noqa: E501


        :return: The costs_text of this Strategytestsummary.  # noqa: E501
        :rtype: str
        """
        return self._costs_text

    @costs_text.setter
    def costs_text(self, costs_text):
        """Sets the costs_text of this Strategytestsummary.


        :param costs_text: The costs_text of this Strategytestsummary.  # noqa: E501
        :type: str
        """

        self._costs_text = costs_text

    @property
    def test_results(self):
        """Gets the test_results of this Strategytestsummary.  # noqa: E501


        :return: The test_results of this Strategytestsummary.  # noqa: E501
        :rtype: Strategytestresults
        """
        return self._test_results

    @test_results.setter
    def test_results(self, test_results):
        """Sets the test_results of this Strategytestsummary.


        :param test_results: The test_results of this Strategytestsummary.  # noqa: E501
        :type: Strategytestresults
        """

        self._test_results = test_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Strategytestsummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Strategytestsummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Strategytestsummary):
            return True

        return self.to_dict() != other.to_dict()
