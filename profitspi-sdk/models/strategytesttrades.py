# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Strategytesttrades(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'strategy_id': 'int',
        'test_num': 'int',
        'test_trades': 'list[Strategytesttrade]',
        'paging': 'Paging'
    }

    attribute_map = {
        'strategy_id': 'strategy_id',
        'test_num': 'test_num',
        'test_trades': 'test_trades',
        'paging': 'paging'
    }

    def __init__(self, strategy_id=None, test_num=None, test_trades=None, paging=None, _configuration=None):  # noqa: E501
        """Strategytesttrades - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._strategy_id = None
        self._test_num = None
        self._test_trades = None
        self._paging = None
        self.discriminator = None

        if strategy_id is not None:
            self.strategy_id = strategy_id
        if test_num is not None:
            self.test_num = test_num
        if test_trades is not None:
            self.test_trades = test_trades
        if paging is not None:
            self.paging = paging

    @property
    def strategy_id(self):
        """Gets the strategy_id of this Strategytesttrades.  # noqa: E501


        :return: The strategy_id of this Strategytesttrades.  # noqa: E501
        :rtype: int
        """
        return self._strategy_id

    @strategy_id.setter
    def strategy_id(self, strategy_id):
        """Sets the strategy_id of this Strategytesttrades.


        :param strategy_id: The strategy_id of this Strategytesttrades.  # noqa: E501
        :type: int
        """

        self._strategy_id = strategy_id

    @property
    def test_num(self):
        """Gets the test_num of this Strategytesttrades.  # noqa: E501


        :return: The test_num of this Strategytesttrades.  # noqa: E501
        :rtype: int
        """
        return self._test_num

    @test_num.setter
    def test_num(self, test_num):
        """Sets the test_num of this Strategytesttrades.


        :param test_num: The test_num of this Strategytesttrades.  # noqa: E501
        :type: int
        """

        self._test_num = test_num

    @property
    def test_trades(self):
        """Gets the test_trades of this Strategytesttrades.  # noqa: E501


        :return: The test_trades of this Strategytesttrades.  # noqa: E501
        :rtype: list[Strategytesttrade]
        """
        return self._test_trades

    @test_trades.setter
    def test_trades(self, test_trades):
        """Sets the test_trades of this Strategytesttrades.


        :param test_trades: The test_trades of this Strategytesttrades.  # noqa: E501
        :type: list[Strategytesttrade]
        """

        self._test_trades = test_trades

    @property
    def paging(self):
        """Gets the paging of this Strategytesttrades.  # noqa: E501


        :return: The paging of this Strategytesttrades.  # noqa: E501
        :rtype: Paging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this Strategytesttrades.


        :param paging: The paging of this Strategytesttrades.  # noqa: E501
        :type: Paging
        """

        self._paging = paging

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Strategytesttrades, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Strategytesttrades):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Strategytesttrades):
            return True

        return self.to_dict() != other.to_dict()
