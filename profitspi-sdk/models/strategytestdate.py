# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Strategytestdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_date': 'datetime',
        'start_equity_value': 'float',
        'end_equity_value': 'float',
        'end_cash_available': 'float',
        'total_open_trades': 'int',
        'total_open_trades_long': 'int',
        'total_open_trades_short': 'int',
        'return_pct': 'float'
    }

    attribute_map = {
        'test_date': 'test_date',
        'start_equity_value': 'start_equity_value',
        'end_equity_value': 'end_equity_value',
        'end_cash_available': 'end_cash_available',
        'total_open_trades': 'total_open_trades',
        'total_open_trades_long': 'total_open_trades_long',
        'total_open_trades_short': 'total_open_trades_short',
        'return_pct': 'return_pct'
    }

    def __init__(self, test_date=None, start_equity_value=None, end_equity_value=None, end_cash_available=None, total_open_trades=None, total_open_trades_long=None, total_open_trades_short=None, return_pct=None, _configuration=None):  # noqa: E501
        """Strategytestdate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._test_date = None
        self._start_equity_value = None
        self._end_equity_value = None
        self._end_cash_available = None
        self._total_open_trades = None
        self._total_open_trades_long = None
        self._total_open_trades_short = None
        self._return_pct = None
        self.discriminator = None

        if test_date is not None:
            self.test_date = test_date
        if start_equity_value is not None:
            self.start_equity_value = start_equity_value
        if end_equity_value is not None:
            self.end_equity_value = end_equity_value
        if end_cash_available is not None:
            self.end_cash_available = end_cash_available
        if total_open_trades is not None:
            self.total_open_trades = total_open_trades
        if total_open_trades_long is not None:
            self.total_open_trades_long = total_open_trades_long
        if total_open_trades_short is not None:
            self.total_open_trades_short = total_open_trades_short
        if return_pct is not None:
            self.return_pct = return_pct

    @property
    def test_date(self):
        """Gets the test_date of this Strategytestdate.  # noqa: E501


        :return: The test_date of this Strategytestdate.  # noqa: E501
        :rtype: datetime
        """
        return self._test_date

    @test_date.setter
    def test_date(self, test_date):
        """Sets the test_date of this Strategytestdate.


        :param test_date: The test_date of this Strategytestdate.  # noqa: E501
        :type: datetime
        """

        self._test_date = test_date

    @property
    def start_equity_value(self):
        """Gets the start_equity_value of this Strategytestdate.  # noqa: E501


        :return: The start_equity_value of this Strategytestdate.  # noqa: E501
        :rtype: float
        """
        return self._start_equity_value

    @start_equity_value.setter
    def start_equity_value(self, start_equity_value):
        """Sets the start_equity_value of this Strategytestdate.


        :param start_equity_value: The start_equity_value of this Strategytestdate.  # noqa: E501
        :type: float
        """

        self._start_equity_value = start_equity_value

    @property
    def end_equity_value(self):
        """Gets the end_equity_value of this Strategytestdate.  # noqa: E501


        :return: The end_equity_value of this Strategytestdate.  # noqa: E501
        :rtype: float
        """
        return self._end_equity_value

    @end_equity_value.setter
    def end_equity_value(self, end_equity_value):
        """Sets the end_equity_value of this Strategytestdate.


        :param end_equity_value: The end_equity_value of this Strategytestdate.  # noqa: E501
        :type: float
        """

        self._end_equity_value = end_equity_value

    @property
    def end_cash_available(self):
        """Gets the end_cash_available of this Strategytestdate.  # noqa: E501


        :return: The end_cash_available of this Strategytestdate.  # noqa: E501
        :rtype: float
        """
        return self._end_cash_available

    @end_cash_available.setter
    def end_cash_available(self, end_cash_available):
        """Sets the end_cash_available of this Strategytestdate.


        :param end_cash_available: The end_cash_available of this Strategytestdate.  # noqa: E501
        :type: float
        """

        self._end_cash_available = end_cash_available

    @property
    def total_open_trades(self):
        """Gets the total_open_trades of this Strategytestdate.  # noqa: E501


        :return: The total_open_trades of this Strategytestdate.  # noqa: E501
        :rtype: int
        """
        return self._total_open_trades

    @total_open_trades.setter
    def total_open_trades(self, total_open_trades):
        """Sets the total_open_trades of this Strategytestdate.


        :param total_open_trades: The total_open_trades of this Strategytestdate.  # noqa: E501
        :type: int
        """

        self._total_open_trades = total_open_trades

    @property
    def total_open_trades_long(self):
        """Gets the total_open_trades_long of this Strategytestdate.  # noqa: E501


        :return: The total_open_trades_long of this Strategytestdate.  # noqa: E501
        :rtype: int
        """
        return self._total_open_trades_long

    @total_open_trades_long.setter
    def total_open_trades_long(self, total_open_trades_long):
        """Sets the total_open_trades_long of this Strategytestdate.


        :param total_open_trades_long: The total_open_trades_long of this Strategytestdate.  # noqa: E501
        :type: int
        """

        self._total_open_trades_long = total_open_trades_long

    @property
    def total_open_trades_short(self):
        """Gets the total_open_trades_short of this Strategytestdate.  # noqa: E501


        :return: The total_open_trades_short of this Strategytestdate.  # noqa: E501
        :rtype: int
        """
        return self._total_open_trades_short

    @total_open_trades_short.setter
    def total_open_trades_short(self, total_open_trades_short):
        """Sets the total_open_trades_short of this Strategytestdate.


        :param total_open_trades_short: The total_open_trades_short of this Strategytestdate.  # noqa: E501
        :type: int
        """

        self._total_open_trades_short = total_open_trades_short

    @property
    def return_pct(self):
        """Gets the return_pct of this Strategytestdate.  # noqa: E501


        :return: The return_pct of this Strategytestdate.  # noqa: E501
        :rtype: float
        """
        return self._return_pct

    @return_pct.setter
    def return_pct(self, return_pct):
        """Sets the return_pct of this Strategytestdate.


        :param return_pct: The return_pct of this Strategytestdate.  # noqa: E501
        :type: float
        """

        self._return_pct = return_pct

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Strategytestdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Strategytestdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Strategytestdate):
            return True

        return self.to_dict() != other.to_dict()
