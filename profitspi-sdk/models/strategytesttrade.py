# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Strategytesttrade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trade_id': 'int',
        'instrument_id': 'int',
        'instrument': 'str',
        'name': 'str',
        'exchange': 'str',
        'entry_date': 'datetime',
        'entry_type': 'str',
        'entry_price': 'float',
        'entry_costs': 'float',
        'trade_quantity': 'float',
        'entry_cash_transfer': 'float',
        'exit_sequence_number': 'int',
        'exit_date': 'datetime',
        'exit_type': 'str',
        'exit_reason': 'str',
        'exit_price': 'float',
        'exit_costs': 'float',
        'exit_cash_transfer': 'float',
        'trade_profit': 'float',
        'total_return_pct': 'float',
        'days_in_trade': 'int',
        'open_profit': 'float',
        'best_close_price': 'float',
        'best_high_low_price': 'float',
        'worst_high_low_price': 'float',
        'atr_at_entry': 'float',
        'trade_is_closed': 'bool',
        'trade_is_open': 'bool',
        'trade_is_pending': 'bool'
    }

    attribute_map = {
        'trade_id': 'trade_id',
        'instrument_id': 'instrument_id',
        'instrument': 'instrument',
        'name': 'name',
        'exchange': 'exchange',
        'entry_date': 'entry_date',
        'entry_type': 'entry_type',
        'entry_price': 'entry_price',
        'entry_costs': 'entry_costs',
        'trade_quantity': 'trade_quantity',
        'entry_cash_transfer': 'entry_cash_transfer',
        'exit_sequence_number': 'exit_sequence_number',
        'exit_date': 'exit_date',
        'exit_type': 'exit_type',
        'exit_reason': 'exit_reason',
        'exit_price': 'exit_price',
        'exit_costs': 'exit_costs',
        'exit_cash_transfer': 'exit_cash_transfer',
        'trade_profit': 'trade_profit',
        'total_return_pct': 'total_return_pct',
        'days_in_trade': 'days_in_trade',
        'open_profit': 'open_profit',
        'best_close_price': 'best_close_price',
        'best_high_low_price': 'best_high_low_price',
        'worst_high_low_price': 'worst_high_low_price',
        'atr_at_entry': 'atr_at_entry',
        'trade_is_closed': 'trade_is_closed',
        'trade_is_open': 'trade_is_open',
        'trade_is_pending': 'trade_is_pending'
    }

    def __init__(self, trade_id=None, instrument_id=None, instrument=None, name=None, exchange=None, entry_date=None, entry_type=None, entry_price=None, entry_costs=None, trade_quantity=None, entry_cash_transfer=None, exit_sequence_number=None, exit_date=None, exit_type=None, exit_reason=None, exit_price=None, exit_costs=None, exit_cash_transfer=None, trade_profit=None, total_return_pct=None, days_in_trade=None, open_profit=None, best_close_price=None, best_high_low_price=None, worst_high_low_price=None, atr_at_entry=None, trade_is_closed=None, trade_is_open=None, trade_is_pending=None, _configuration=None):  # noqa: E501
        """Strategytesttrade - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._trade_id = None
        self._instrument_id = None
        self._instrument = None
        self._name = None
        self._exchange = None
        self._entry_date = None
        self._entry_type = None
        self._entry_price = None
        self._entry_costs = None
        self._trade_quantity = None
        self._entry_cash_transfer = None
        self._exit_sequence_number = None
        self._exit_date = None
        self._exit_type = None
        self._exit_reason = None
        self._exit_price = None
        self._exit_costs = None
        self._exit_cash_transfer = None
        self._trade_profit = None
        self._total_return_pct = None
        self._days_in_trade = None
        self._open_profit = None
        self._best_close_price = None
        self._best_high_low_price = None
        self._worst_high_low_price = None
        self._atr_at_entry = None
        self._trade_is_closed = None
        self._trade_is_open = None
        self._trade_is_pending = None
        self.discriminator = None

        if trade_id is not None:
            self.trade_id = trade_id
        if instrument_id is not None:
            self.instrument_id = instrument_id
        if instrument is not None:
            self.instrument = instrument
        if name is not None:
            self.name = name
        if exchange is not None:
            self.exchange = exchange
        if entry_date is not None:
            self.entry_date = entry_date
        if entry_type is not None:
            self.entry_type = entry_type
        if entry_price is not None:
            self.entry_price = entry_price
        if entry_costs is not None:
            self.entry_costs = entry_costs
        if trade_quantity is not None:
            self.trade_quantity = trade_quantity
        if entry_cash_transfer is not None:
            self.entry_cash_transfer = entry_cash_transfer
        if exit_sequence_number is not None:
            self.exit_sequence_number = exit_sequence_number
        if exit_date is not None:
            self.exit_date = exit_date
        if exit_type is not None:
            self.exit_type = exit_type
        if exit_reason is not None:
            self.exit_reason = exit_reason
        if exit_price is not None:
            self.exit_price = exit_price
        if exit_costs is not None:
            self.exit_costs = exit_costs
        if exit_cash_transfer is not None:
            self.exit_cash_transfer = exit_cash_transfer
        if trade_profit is not None:
            self.trade_profit = trade_profit
        if total_return_pct is not None:
            self.total_return_pct = total_return_pct
        if days_in_trade is not None:
            self.days_in_trade = days_in_trade
        if open_profit is not None:
            self.open_profit = open_profit
        if best_close_price is not None:
            self.best_close_price = best_close_price
        if best_high_low_price is not None:
            self.best_high_low_price = best_high_low_price
        if worst_high_low_price is not None:
            self.worst_high_low_price = worst_high_low_price
        if atr_at_entry is not None:
            self.atr_at_entry = atr_at_entry
        if trade_is_closed is not None:
            self.trade_is_closed = trade_is_closed
        if trade_is_open is not None:
            self.trade_is_open = trade_is_open
        if trade_is_pending is not None:
            self.trade_is_pending = trade_is_pending

    @property
    def trade_id(self):
        """Gets the trade_id of this Strategytesttrade.  # noqa: E501


        :return: The trade_id of this Strategytesttrade.  # noqa: E501
        :rtype: int
        """
        return self._trade_id

    @trade_id.setter
    def trade_id(self, trade_id):
        """Sets the trade_id of this Strategytesttrade.


        :param trade_id: The trade_id of this Strategytesttrade.  # noqa: E501
        :type: int
        """

        self._trade_id = trade_id

    @property
    def instrument_id(self):
        """Gets the instrument_id of this Strategytesttrade.  # noqa: E501


        :return: The instrument_id of this Strategytesttrade.  # noqa: E501
        :rtype: int
        """
        return self._instrument_id

    @instrument_id.setter
    def instrument_id(self, instrument_id):
        """Sets the instrument_id of this Strategytesttrade.


        :param instrument_id: The instrument_id of this Strategytesttrade.  # noqa: E501
        :type: int
        """

        self._instrument_id = instrument_id

    @property
    def instrument(self):
        """Gets the instrument of this Strategytesttrade.  # noqa: E501


        :return: The instrument of this Strategytesttrade.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this Strategytesttrade.


        :param instrument: The instrument of this Strategytesttrade.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def name(self):
        """Gets the name of this Strategytesttrade.  # noqa: E501


        :return: The name of this Strategytesttrade.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Strategytesttrade.


        :param name: The name of this Strategytesttrade.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def exchange(self):
        """Gets the exchange of this Strategytesttrade.  # noqa: E501


        :return: The exchange of this Strategytesttrade.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this Strategytesttrade.


        :param exchange: The exchange of this Strategytesttrade.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def entry_date(self):
        """Gets the entry_date of this Strategytesttrade.  # noqa: E501


        :return: The entry_date of this Strategytesttrade.  # noqa: E501
        :rtype: datetime
        """
        return self._entry_date

    @entry_date.setter
    def entry_date(self, entry_date):
        """Sets the entry_date of this Strategytesttrade.


        :param entry_date: The entry_date of this Strategytesttrade.  # noqa: E501
        :type: datetime
        """

        self._entry_date = entry_date

    @property
    def entry_type(self):
        """Gets the entry_type of this Strategytesttrade.  # noqa: E501


        :return: The entry_type of this Strategytesttrade.  # noqa: E501
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this Strategytesttrade.


        :param entry_type: The entry_type of this Strategytesttrade.  # noqa: E501
        :type: str
        """

        self._entry_type = entry_type

    @property
    def entry_price(self):
        """Gets the entry_price of this Strategytesttrade.  # noqa: E501


        :return: The entry_price of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._entry_price

    @entry_price.setter
    def entry_price(self, entry_price):
        """Sets the entry_price of this Strategytesttrade.


        :param entry_price: The entry_price of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._entry_price = entry_price

    @property
    def entry_costs(self):
        """Gets the entry_costs of this Strategytesttrade.  # noqa: E501


        :return: The entry_costs of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._entry_costs

    @entry_costs.setter
    def entry_costs(self, entry_costs):
        """Sets the entry_costs of this Strategytesttrade.


        :param entry_costs: The entry_costs of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._entry_costs = entry_costs

    @property
    def trade_quantity(self):
        """Gets the trade_quantity of this Strategytesttrade.  # noqa: E501


        :return: The trade_quantity of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._trade_quantity

    @trade_quantity.setter
    def trade_quantity(self, trade_quantity):
        """Sets the trade_quantity of this Strategytesttrade.


        :param trade_quantity: The trade_quantity of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._trade_quantity = trade_quantity

    @property
    def entry_cash_transfer(self):
        """Gets the entry_cash_transfer of this Strategytesttrade.  # noqa: E501


        :return: The entry_cash_transfer of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._entry_cash_transfer

    @entry_cash_transfer.setter
    def entry_cash_transfer(self, entry_cash_transfer):
        """Sets the entry_cash_transfer of this Strategytesttrade.


        :param entry_cash_transfer: The entry_cash_transfer of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._entry_cash_transfer = entry_cash_transfer

    @property
    def exit_sequence_number(self):
        """Gets the exit_sequence_number of this Strategytesttrade.  # noqa: E501


        :return: The exit_sequence_number of this Strategytesttrade.  # noqa: E501
        :rtype: int
        """
        return self._exit_sequence_number

    @exit_sequence_number.setter
    def exit_sequence_number(self, exit_sequence_number):
        """Sets the exit_sequence_number of this Strategytesttrade.


        :param exit_sequence_number: The exit_sequence_number of this Strategytesttrade.  # noqa: E501
        :type: int
        """

        self._exit_sequence_number = exit_sequence_number

    @property
    def exit_date(self):
        """Gets the exit_date of this Strategytesttrade.  # noqa: E501


        :return: The exit_date of this Strategytesttrade.  # noqa: E501
        :rtype: datetime
        """
        return self._exit_date

    @exit_date.setter
    def exit_date(self, exit_date):
        """Sets the exit_date of this Strategytesttrade.


        :param exit_date: The exit_date of this Strategytesttrade.  # noqa: E501
        :type: datetime
        """

        self._exit_date = exit_date

    @property
    def exit_type(self):
        """Gets the exit_type of this Strategytesttrade.  # noqa: E501


        :return: The exit_type of this Strategytesttrade.  # noqa: E501
        :rtype: str
        """
        return self._exit_type

    @exit_type.setter
    def exit_type(self, exit_type):
        """Sets the exit_type of this Strategytesttrade.


        :param exit_type: The exit_type of this Strategytesttrade.  # noqa: E501
        :type: str
        """

        self._exit_type = exit_type

    @property
    def exit_reason(self):
        """Gets the exit_reason of this Strategytesttrade.  # noqa: E501


        :return: The exit_reason of this Strategytesttrade.  # noqa: E501
        :rtype: str
        """
        return self._exit_reason

    @exit_reason.setter
    def exit_reason(self, exit_reason):
        """Sets the exit_reason of this Strategytesttrade.


        :param exit_reason: The exit_reason of this Strategytesttrade.  # noqa: E501
        :type: str
        """

        self._exit_reason = exit_reason

    @property
    def exit_price(self):
        """Gets the exit_price of this Strategytesttrade.  # noqa: E501


        :return: The exit_price of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._exit_price

    @exit_price.setter
    def exit_price(self, exit_price):
        """Sets the exit_price of this Strategytesttrade.


        :param exit_price: The exit_price of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._exit_price = exit_price

    @property
    def exit_costs(self):
        """Gets the exit_costs of this Strategytesttrade.  # noqa: E501


        :return: The exit_costs of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._exit_costs

    @exit_costs.setter
    def exit_costs(self, exit_costs):
        """Sets the exit_costs of this Strategytesttrade.


        :param exit_costs: The exit_costs of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._exit_costs = exit_costs

    @property
    def exit_cash_transfer(self):
        """Gets the exit_cash_transfer of this Strategytesttrade.  # noqa: E501


        :return: The exit_cash_transfer of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._exit_cash_transfer

    @exit_cash_transfer.setter
    def exit_cash_transfer(self, exit_cash_transfer):
        """Sets the exit_cash_transfer of this Strategytesttrade.


        :param exit_cash_transfer: The exit_cash_transfer of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._exit_cash_transfer = exit_cash_transfer

    @property
    def trade_profit(self):
        """Gets the trade_profit of this Strategytesttrade.  # noqa: E501


        :return: The trade_profit of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._trade_profit

    @trade_profit.setter
    def trade_profit(self, trade_profit):
        """Sets the trade_profit of this Strategytesttrade.


        :param trade_profit: The trade_profit of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._trade_profit = trade_profit

    @property
    def total_return_pct(self):
        """Gets the total_return_pct of this Strategytesttrade.  # noqa: E501


        :return: The total_return_pct of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._total_return_pct

    @total_return_pct.setter
    def total_return_pct(self, total_return_pct):
        """Sets the total_return_pct of this Strategytesttrade.


        :param total_return_pct: The total_return_pct of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._total_return_pct = total_return_pct

    @property
    def days_in_trade(self):
        """Gets the days_in_trade of this Strategytesttrade.  # noqa: E501


        :return: The days_in_trade of this Strategytesttrade.  # noqa: E501
        :rtype: int
        """
        return self._days_in_trade

    @days_in_trade.setter
    def days_in_trade(self, days_in_trade):
        """Sets the days_in_trade of this Strategytesttrade.


        :param days_in_trade: The days_in_trade of this Strategytesttrade.  # noqa: E501
        :type: int
        """

        self._days_in_trade = days_in_trade

    @property
    def open_profit(self):
        """Gets the open_profit of this Strategytesttrade.  # noqa: E501


        :return: The open_profit of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._open_profit

    @open_profit.setter
    def open_profit(self, open_profit):
        """Sets the open_profit of this Strategytesttrade.


        :param open_profit: The open_profit of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._open_profit = open_profit

    @property
    def best_close_price(self):
        """Gets the best_close_price of this Strategytesttrade.  # noqa: E501


        :return: The best_close_price of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._best_close_price

    @best_close_price.setter
    def best_close_price(self, best_close_price):
        """Sets the best_close_price of this Strategytesttrade.


        :param best_close_price: The best_close_price of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._best_close_price = best_close_price

    @property
    def best_high_low_price(self):
        """Gets the best_high_low_price of this Strategytesttrade.  # noqa: E501


        :return: The best_high_low_price of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._best_high_low_price

    @best_high_low_price.setter
    def best_high_low_price(self, best_high_low_price):
        """Sets the best_high_low_price of this Strategytesttrade.


        :param best_high_low_price: The best_high_low_price of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._best_high_low_price = best_high_low_price

    @property
    def worst_high_low_price(self):
        """Gets the worst_high_low_price of this Strategytesttrade.  # noqa: E501


        :return: The worst_high_low_price of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._worst_high_low_price

    @worst_high_low_price.setter
    def worst_high_low_price(self, worst_high_low_price):
        """Sets the worst_high_low_price of this Strategytesttrade.


        :param worst_high_low_price: The worst_high_low_price of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._worst_high_low_price = worst_high_low_price

    @property
    def atr_at_entry(self):
        """Gets the atr_at_entry of this Strategytesttrade.  # noqa: E501


        :return: The atr_at_entry of this Strategytesttrade.  # noqa: E501
        :rtype: float
        """
        return self._atr_at_entry

    @atr_at_entry.setter
    def atr_at_entry(self, atr_at_entry):
        """Sets the atr_at_entry of this Strategytesttrade.


        :param atr_at_entry: The atr_at_entry of this Strategytesttrade.  # noqa: E501
        :type: float
        """

        self._atr_at_entry = atr_at_entry

    @property
    def trade_is_closed(self):
        """Gets the trade_is_closed of this Strategytesttrade.  # noqa: E501


        :return: The trade_is_closed of this Strategytesttrade.  # noqa: E501
        :rtype: bool
        """
        return self._trade_is_closed

    @trade_is_closed.setter
    def trade_is_closed(self, trade_is_closed):
        """Sets the trade_is_closed of this Strategytesttrade.


        :param trade_is_closed: The trade_is_closed of this Strategytesttrade.  # noqa: E501
        :type: bool
        """

        self._trade_is_closed = trade_is_closed

    @property
    def trade_is_open(self):
        """Gets the trade_is_open of this Strategytesttrade.  # noqa: E501


        :return: The trade_is_open of this Strategytesttrade.  # noqa: E501
        :rtype: bool
        """
        return self._trade_is_open

    @trade_is_open.setter
    def trade_is_open(self, trade_is_open):
        """Sets the trade_is_open of this Strategytesttrade.


        :param trade_is_open: The trade_is_open of this Strategytesttrade.  # noqa: E501
        :type: bool
        """

        self._trade_is_open = trade_is_open

    @property
    def trade_is_pending(self):
        """Gets the trade_is_pending of this Strategytesttrade.  # noqa: E501


        :return: The trade_is_pending of this Strategytesttrade.  # noqa: E501
        :rtype: bool
        """
        return self._trade_is_pending

    @trade_is_pending.setter
    def trade_is_pending(self, trade_is_pending):
        """Sets the trade_is_pending of this Strategytesttrade.


        :param trade_is_pending: The trade_is_pending of this Strategytesttrade.  # noqa: E501
        :type: bool
        """

        self._trade_is_pending = trade_is_pending

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Strategytesttrade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Strategytesttrade):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Strategytesttrade):
            return True

        return self.to_dict() != other.to_dict()
