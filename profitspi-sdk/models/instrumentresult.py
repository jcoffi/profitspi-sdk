# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from profitspi-sdk.configuration import Configuration


class Instrumentresult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instrument_id': 'int',
        'instrument': 'str',
        'name': 'str',
        'exchange_id': 'str',
        'exchange': 'str',
        'history_date': 'datetime',
        'additional_values': 'list[str]'
    }

    attribute_map = {
        'instrument_id': 'instrument_id',
        'instrument': 'instrument',
        'name': 'name',
        'exchange_id': 'exchange_id',
        'exchange': 'exchange',
        'history_date': 'history_date',
        'additional_values': 'additional_values'
    }

    def __init__(self, instrument_id=None, instrument=None, name=None, exchange_id=None, exchange=None, history_date=None, additional_values=None, _configuration=None):  # noqa: E501
        """Instrumentresult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._instrument_id = None
        self._instrument = None
        self._name = None
        self._exchange_id = None
        self._exchange = None
        self._history_date = None
        self._additional_values = None
        self.discriminator = None

        if instrument_id is not None:
            self.instrument_id = instrument_id
        if instrument is not None:
            self.instrument = instrument
        if name is not None:
            self.name = name
        if exchange_id is not None:
            self.exchange_id = exchange_id
        if exchange is not None:
            self.exchange = exchange
        if history_date is not None:
            self.history_date = history_date
        if additional_values is not None:
            self.additional_values = additional_values

    @property
    def instrument_id(self):
        """Gets the instrument_id of this Instrumentresult.  # noqa: E501


        :return: The instrument_id of this Instrumentresult.  # noqa: E501
        :rtype: int
        """
        return self._instrument_id

    @instrument_id.setter
    def instrument_id(self, instrument_id):
        """Sets the instrument_id of this Instrumentresult.


        :param instrument_id: The instrument_id of this Instrumentresult.  # noqa: E501
        :type: int
        """

        self._instrument_id = instrument_id

    @property
    def instrument(self):
        """Gets the instrument of this Instrumentresult.  # noqa: E501


        :return: The instrument of this Instrumentresult.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this Instrumentresult.


        :param instrument: The instrument of this Instrumentresult.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def name(self):
        """Gets the name of this Instrumentresult.  # noqa: E501


        :return: The name of this Instrumentresult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instrumentresult.


        :param name: The name of this Instrumentresult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def exchange_id(self):
        """Gets the exchange_id of this Instrumentresult.  # noqa: E501


        :return: The exchange_id of this Instrumentresult.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this Instrumentresult.


        :param exchange_id: The exchange_id of this Instrumentresult.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    @property
    def exchange(self):
        """Gets the exchange of this Instrumentresult.  # noqa: E501


        :return: The exchange of this Instrumentresult.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this Instrumentresult.


        :param exchange: The exchange of this Instrumentresult.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def history_date(self):
        """Gets the history_date of this Instrumentresult.  # noqa: E501


        :return: The history_date of this Instrumentresult.  # noqa: E501
        :rtype: datetime
        """
        return self._history_date

    @history_date.setter
    def history_date(self, history_date):
        """Sets the history_date of this Instrumentresult.


        :param history_date: The history_date of this Instrumentresult.  # noqa: E501
        :type: datetime
        """

        self._history_date = history_date

    @property
    def additional_values(self):
        """Gets the additional_values of this Instrumentresult.  # noqa: E501


        :return: The additional_values of this Instrumentresult.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_values

    @additional_values.setter
    def additional_values(self, additional_values):
        """Sets the additional_values of this Instrumentresult.


        :param additional_values: The additional_values of this Instrumentresult.  # noqa: E501
        :type: list[str]
        """

        self._additional_values = additional_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Instrumentresult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Instrumentresult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Instrumentresult):
            return True

        return self.to_dict() != other.to_dict()
