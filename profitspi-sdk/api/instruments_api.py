# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from profitspi-sdk.api_client import ApiClient


class InstrumentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def instruments_get_instrument_group_item_instruments(self, id, item, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Instruments for a specific Instrument Group Item together with adhoc technical indicators.  # noqa: E501

        Returns a list of Instruments with their Name and Exchange for a specific Instrument Group Item. Eg Exchange NASDAQ.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_group_item_instruments(id, item, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The instrument_group_id from the Instrument Groups API. (required)
        :param str item: The instrument_group_item_id from the Instrument Group Items API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime history_date: A date in the format yyyy-mm-dd to backdate the search. Default is latest date.
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :param str av_0: Specify adhoc Indicator values to be included in the results together with optional Parameters, Period, Offset and Custom Inputs. For example: av_0=CLOSE&amp;av_1=BBUPPER(30 2)&amp;av_2=WEEKLY BBUPPER(30 2)[-1]&amp;av_3=WEEKLY SMA(VOLUME 20)
        :param str av_1:
        :param str av_2:
        :param str av_3:
        :param str av_4:
        :param str av_5:
        :param str av_6:
        :param str av_7:
        :param str av_8:
        :param str av_9:
        :return: Instrumentgroupiteminstruments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_instrument_group_item_instruments_with_http_info(id, item, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_instrument_group_item_instruments_with_http_info(id, item, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def instruments_get_instrument_group_item_instruments_with_http_info(self, id, item, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Instruments for a specific Instrument Group Item together with adhoc technical indicators.  # noqa: E501

        Returns a list of Instruments with their Name and Exchange for a specific Instrument Group Item. Eg Exchange NASDAQ.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_group_item_instruments_with_http_info(id, item, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The instrument_group_id from the Instrument Groups API. (required)
        :param str item: The instrument_group_item_id from the Instrument Group Items API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime history_date: A date in the format yyyy-mm-dd to backdate the search. Default is latest date.
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :param str av_0: Specify adhoc Indicator values to be included in the results together with optional Parameters, Period, Offset and Custom Inputs. For example: av_0=CLOSE&amp;av_1=BBUPPER(30 2)&amp;av_2=WEEKLY BBUPPER(30 2)[-1]&amp;av_3=WEEKLY SMA(VOLUME 20)
        :param str av_1:
        :param str av_2:
        :param str av_3:
        :param str av_4:
        :param str av_5:
        :param str av_6:
        :param str av_7:
        :param str av_8:
        :param str av_9:
        :return: Instrumentgroupiteminstruments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'item', 'api_key', 'user_id', 'history_date', 'per_page', 'page', 'av_0', 'av_1', 'av_2', 'av_3', 'av_4', 'av_5', 'av_6', 'av_7', 'av_8', 'av_9']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_instrument_group_item_instruments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instruments_get_instrument_group_item_instruments`")  # noqa: E501
        # verify the required parameter 'item' is set
        if self.api_client.client_side_validation and ('item' not in params or
                                                       params['item'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item` when calling `instruments_get_instrument_group_item_instruments`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `instruments_get_instrument_group_item_instruments`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `instruments_get_instrument_group_item_instruments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'item' in params:
            path_params['item'] = params['item']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'history_date' in params:
            query_params.append(('history_date', params['history_date']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'av_0' in params:
            query_params.append(('av_0', params['av_0']))  # noqa: E501
        if 'av_1' in params:
            query_params.append(('av_1', params['av_1']))  # noqa: E501
        if 'av_2' in params:
            query_params.append(('av_2', params['av_2']))  # noqa: E501
        if 'av_3' in params:
            query_params.append(('av_3', params['av_3']))  # noqa: E501
        if 'av_4' in params:
            query_params.append(('av_4', params['av_4']))  # noqa: E501
        if 'av_5' in params:
            query_params.append(('av_5', params['av_5']))  # noqa: E501
        if 'av_6' in params:
            query_params.append(('av_6', params['av_6']))  # noqa: E501
        if 'av_7' in params:
            query_params.append(('av_7', params['av_7']))  # noqa: E501
        if 'av_8' in params:
            query_params.append(('av_8', params['av_8']))  # noqa: E501
        if 'av_9' in params:
            query_params.append(('av_9', params['av_9']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/instrumentgroups/{id}/{item}/instruments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Instrumentgroupiteminstruments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_get_instrument_group_item_sub_types(self, id, item, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of different subtypes for a specific Instrument Group Item.  # noqa: E501

        Returns a list of Instrument Group Item Subtypes with their descriptions. Only some Items have Subtypes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_group_item_sub_types(id, item, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The instrument_group_id from the Instrument Groups API. (required)
        :param str item: The instrument_group_item_id from the Instrument Group Items API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Instrumentgroupitemsubtype]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_instrument_group_item_sub_types_with_http_info(id, item, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_instrument_group_item_sub_types_with_http_info(id, item, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def instruments_get_instrument_group_item_sub_types_with_http_info(self, id, item, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of different subtypes for a specific Instrument Group Item.  # noqa: E501

        Returns a list of Instrument Group Item Subtypes with their descriptions. Only some Items have Subtypes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_group_item_sub_types_with_http_info(id, item, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The instrument_group_id from the Instrument Groups API. (required)
        :param str item: The instrument_group_item_id from the Instrument Group Items API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Instrumentgroupitemsubtype]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'item', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_instrument_group_item_sub_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instruments_get_instrument_group_item_sub_types`")  # noqa: E501
        # verify the required parameter 'item' is set
        if self.api_client.client_side_validation and ('item' not in params or
                                                       params['item'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item` when calling `instruments_get_instrument_group_item_sub_types`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `instruments_get_instrument_group_item_sub_types`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `instruments_get_instrument_group_item_sub_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'item' in params:
            path_params['item'] = params['item']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/instrumentgroups/{id}/{item}/subtypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Instrumentgroupitemsubtype]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_get_instrument_groups(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of different types of Instrument Groups.  # noqa: E501

        Instrument Groups are used to group related Instruments. The different Types include Exchange and Sector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_groups(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Instrumentgroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_instrument_groups_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_instrument_groups_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def instruments_get_instrument_groups_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of different types of Instrument Groups.  # noqa: E501

        Instrument Groups are used to group related Instruments. The different Types include Exchange and Sector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_groups_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Instrumentgroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_instrument_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `instruments_get_instrument_groups`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `instruments_get_instrument_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/instrumentgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Instrumentgroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_get_instrument_groups_0(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of different items for a specific Instrument Group.  # noqa: E501

        Retrieve the different Items for a specific Instrument Group. Eg the Exchange group includes NASDAQ, NYSE, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_groups_0(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The instrument_group_id from the Instrument Groups API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Instrumentgroupitem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_instrument_groups_0_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_instrument_groups_0_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def instruments_get_instrument_groups_0_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of different items for a specific Instrument Group.  # noqa: E501

        Retrieve the different Items for a specific Instrument Group. Eg the Exchange group includes NASDAQ, NYSE, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_groups_0_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The instrument_group_id from the Instrument Groups API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Instrumentgroupitem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_instrument_groups_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instruments_get_instrument_groups_0`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `instruments_get_instrument_groups_0`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `instruments_get_instrument_groups_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/instrumentgroups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Instrumentgroupitem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_get_instrument_history(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves historic data for a specific Instrument together with adhoc technical indicators.  # noqa: E501

        Retrieve historical data for a specific Instrument.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_history(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The instrument_id. Eg AAPL (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime begin_date: A date in the format yyyy-mm-dd to restrict the search.
        :param datetime end_date: A date in the format yyyy-mm-dd to restrict the search.
        :param str period_type: Use \"W\" for Weekly, \"M\" for Monthly, \"Y\" for Yearly. Default is \"D\" for Daily
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :param str av_0: Specify adhoc Indicator values to be included in the results together with optional Parameters, Period, Offset and Custom Inputs. For example: av_0=CLOSE&amp;av_1=BBUPPER(30 2)&amp;av_2=WEEKLY BBUPPER(30 2)[-1]&amp;av_3=WEEKLY SMA(VOLUME 20)
        :param str av_1:
        :param str av_2:
        :param str av_3:
        :param str av_4:
        :param str av_5:
        :param str av_6:
        :param str av_7:
        :param str av_8:
        :param str av_9:
        :return: Instrumenthistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_instrument_history_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_instrument_history_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def instruments_get_instrument_history_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves historic data for a specific Instrument together with adhoc technical indicators.  # noqa: E501

        Retrieve historical data for a specific Instrument.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_history_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The instrument_id. Eg AAPL (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime begin_date: A date in the format yyyy-mm-dd to restrict the search.
        :param datetime end_date: A date in the format yyyy-mm-dd to restrict the search.
        :param str period_type: Use \"W\" for Weekly, \"M\" for Monthly, \"Y\" for Yearly. Default is \"D\" for Daily
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :param str av_0: Specify adhoc Indicator values to be included in the results together with optional Parameters, Period, Offset and Custom Inputs. For example: av_0=CLOSE&amp;av_1=BBUPPER(30 2)&amp;av_2=WEEKLY BBUPPER(30 2)[-1]&amp;av_3=WEEKLY SMA(VOLUME 20)
        :param str av_1:
        :param str av_2:
        :param str av_3:
        :param str av_4:
        :param str av_5:
        :param str av_6:
        :param str av_7:
        :param str av_8:
        :param str av_9:
        :return: Instrumenthistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id', 'begin_date', 'end_date', 'period_type', 'per_page', 'page', 'av_0', 'av_1', 'av_2', 'av_3', 'av_4', 'av_5', 'av_6', 'av_7', 'av_8', 'av_9']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_instrument_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instruments_get_instrument_history`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `instruments_get_instrument_history`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `instruments_get_instrument_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'begin_date' in params:
            query_params.append(('begin_date', params['begin_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'period_type' in params:
            query_params.append(('period_type', params['period_type']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'av_0' in params:
            query_params.append(('av_0', params['av_0']))  # noqa: E501
        if 'av_1' in params:
            query_params.append(('av_1', params['av_1']))  # noqa: E501
        if 'av_2' in params:
            query_params.append(('av_2', params['av_2']))  # noqa: E501
        if 'av_3' in params:
            query_params.append(('av_3', params['av_3']))  # noqa: E501
        if 'av_4' in params:
            query_params.append(('av_4', params['av_4']))  # noqa: E501
        if 'av_5' in params:
            query_params.append(('av_5', params['av_5']))  # noqa: E501
        if 'av_6' in params:
            query_params.append(('av_6', params['av_6']))  # noqa: E501
        if 'av_7' in params:
            query_params.append(('av_7', params['av_7']))  # noqa: E501
        if 'av_8' in params:
            query_params.append(('av_8', params['av_8']))  # noqa: E501
        if 'av_9' in params:
            query_params.append(('av_9', params['av_9']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/instrumenthistory/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Instrumenthistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_get_instrument_search_instruments(self, search, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Instruments matching a search string together with adhoc technical indicators.  # noqa: E501

        Search for Instruments that have the search string in their Instrument symbol or Name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_search_instruments(search, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: The string to be used for the search. Eg BANK (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime history_date: A date in the format yyyy-mm-dd to backdate the search. Default is latest date.
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :param str av_0: Specify adhoc Indicator values to be included in the results together with optional Parameters, Period, Offset and Custom Inputs. For example: av_0=CLOSE&amp;av_1=BBUPPER(30 2)&amp;av_2=WEEKLY BBUPPER(30 2)[-1]&amp;av_3=WEEKLY SMA(VOLUME 20)
        :param str av_1:
        :param str av_2:
        :param str av_3:
        :param str av_4:
        :param str av_5:
        :param str av_6:
        :param str av_7:
        :param str av_8:
        :param str av_9:
        :return: Instrumentsearchinstruments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_instrument_search_instruments_with_http_info(search, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_instrument_search_instruments_with_http_info(search, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def instruments_get_instrument_search_instruments_with_http_info(self, search, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Instruments matching a search string together with adhoc technical indicators.  # noqa: E501

        Search for Instruments that have the search string in their Instrument symbol or Name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_search_instruments_with_http_info(search, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: The string to be used for the search. Eg BANK (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime history_date: A date in the format yyyy-mm-dd to backdate the search. Default is latest date.
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :param str av_0: Specify adhoc Indicator values to be included in the results together with optional Parameters, Period, Offset and Custom Inputs. For example: av_0=CLOSE&amp;av_1=BBUPPER(30 2)&amp;av_2=WEEKLY BBUPPER(30 2)[-1]&amp;av_3=WEEKLY SMA(VOLUME 20)
        :param str av_1:
        :param str av_2:
        :param str av_3:
        :param str av_4:
        :param str av_5:
        :param str av_6:
        :param str av_7:
        :param str av_8:
        :param str av_9:
        :return: Instrumentsearchinstruments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'api_key', 'user_id', 'history_date', 'per_page', 'page', 'av_0', 'av_1', 'av_2', 'av_3', 'av_4', 'av_5', 'av_6', 'av_7', 'av_8', 'av_9']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_instrument_search_instruments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if self.api_client.client_side_validation and ('search' not in params or
                                                       params['search'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search` when calling `instruments_get_instrument_search_instruments`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `instruments_get_instrument_search_instruments`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `instruments_get_instrument_search_instruments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'search' in params:
            path_params['search'] = params['search']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'history_date' in params:
            query_params.append(('history_date', params['history_date']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'av_0' in params:
            query_params.append(('av_0', params['av_0']))  # noqa: E501
        if 'av_1' in params:
            query_params.append(('av_1', params['av_1']))  # noqa: E501
        if 'av_2' in params:
            query_params.append(('av_2', params['av_2']))  # noqa: E501
        if 'av_3' in params:
            query_params.append(('av_3', params['av_3']))  # noqa: E501
        if 'av_4' in params:
            query_params.append(('av_4', params['av_4']))  # noqa: E501
        if 'av_5' in params:
            query_params.append(('av_5', params['av_5']))  # noqa: E501
        if 'av_6' in params:
            query_params.append(('av_6', params['av_6']))  # noqa: E501
        if 'av_7' in params:
            query_params.append(('av_7', params['av_7']))  # noqa: E501
        if 'av_8' in params:
            query_params.append(('av_8', params['av_8']))  # noqa: E501
        if 'av_9' in params:
            query_params.append(('av_9', params['av_9']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/instrumentsearch/{search}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Instrumentsearchinstruments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
