# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from profitspi-sdk.api_client import ApiClient


class UserInstrumentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def user_instruments_delete_user_calendar_holidays(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes all Holidays for a User or Corporate Calendar.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_delete_user_calendar_holidays(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The calendar_id. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_delete_user_calendar_holidays_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_delete_user_calendar_holidays_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_delete_user_calendar_holidays_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes all Holidays for a User or Corporate Calendar.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_delete_user_calendar_holidays_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The calendar_id. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_delete_user_calendar_holidays" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_delete_user_calendar_holidays`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_delete_user_calendar_holidays`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_delete_user_calendar_holidays`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usercalendars/{id}/holidays', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_delete_user_exchange_instrument(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes a specific Instrument for a User or Corporate Instrument.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_delete_user_exchange_instrument(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_delete_user_exchange_instrument_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_delete_user_exchange_instrument_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_delete_user_exchange_instrument_with_http_info(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes a specific Instrument for a User or Corporate Instrument.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_delete_user_exchange_instrument_with_http_info(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'instrument', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_delete_user_exchange_instrument" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_delete_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and ('instrument' not in params or
                                                       params['instrument'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument` when calling `user_instruments_delete_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_delete_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_delete_user_exchange_instrument`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'instrument' in params:
            path_params['instrument'] = params['instrument']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}/instruments/{instrument}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_delete_user_instrument_price_history(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes all price history for a User or Corporate Instrument.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_delete_user_instrument_price_history(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_delete_user_instrument_price_history_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_delete_user_instrument_price_history_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_delete_user_instrument_price_history_with_http_info(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes all price history for a User or Corporate Instrument.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_delete_user_instrument_price_history_with_http_info(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'instrument', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_delete_user_instrument_price_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_delete_user_instrument_price_history`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and ('instrument' not in params or
                                                       params['instrument'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument` when calling `user_instruments_delete_user_instrument_price_history`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_delete_user_instrument_price_history`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_delete_user_instrument_price_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'instrument' in params:
            path_params['instrument'] = params['instrument']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}/instruments/{instrument}/pricehistory', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_delete_user_instrument_splits(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes all Splits for a User or Corporate Instrument.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_delete_user_instrument_splits(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_delete_user_instrument_splits_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_delete_user_instrument_splits_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_delete_user_instrument_splits_with_http_info(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes all Splits for a User or Corporate Instrument.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_delete_user_instrument_splits_with_http_info(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'instrument', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_delete_user_instrument_splits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_delete_user_instrument_splits`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and ('instrument' not in params or
                                                       params['instrument'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument` when calling `user_instruments_delete_user_instrument_splits`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_delete_user_instrument_splits`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_delete_user_instrument_splits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'instrument' in params:
            path_params['instrument'] = params['instrument']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}/instruments/{instrument}/splits', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_get_user_calendar(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves a specific User or Corporate Calendar.  # noqa: E501

        Retrieve a specific User or Corporate Calendar.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_calendar(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The calendar_id. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Usercalendar]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_get_user_calendar_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_get_user_calendar_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_get_user_calendar_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves a specific User or Corporate Calendar.  # noqa: E501

        Retrieve a specific User or Corporate Calendar.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_calendar_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The calendar_id. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Usercalendar]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_get_user_calendar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_get_user_calendar`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_get_user_calendar`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_get_user_calendar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usercalendars/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Usercalendar]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_get_user_calendar_holidays(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Holidays for a User or Corporate Calendar.  # noqa: E501

        Retrieves the list of Holidays for a User or Corporate Calendar.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_calendar_holidays(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The calendar_id. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Usercalendarholiday]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_get_user_calendar_holidays_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_get_user_calendar_holidays_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_get_user_calendar_holidays_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Holidays for a User or Corporate Calendar.  # noqa: E501

        Retrieves the list of Holidays for a User or Corporate Calendar.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_calendar_holidays_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The calendar_id. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Usercalendarholiday]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_get_user_calendar_holidays" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_get_user_calendar_holidays`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_get_user_calendar_holidays`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_get_user_calendar_holidays`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usercalendars/{id}/holidays', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Usercalendarholiday]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_get_user_calendars(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of User or Corporate Calendars.  # noqa: E501

        Retrieves the list of User or Corporate Calendars.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_calendars(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Usercalendar]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_get_user_calendars_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_get_user_calendars_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_get_user_calendars_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of User or Corporate Calendars.  # noqa: E501

        Retrieves the list of User or Corporate Calendars.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_calendars_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Usercalendar]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_get_user_calendars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_get_user_calendars`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_get_user_calendars`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usercalendars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Usercalendar]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_get_user_exchange(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves a specific User or Corporate Exchange.  # noqa: E501

        Retrieve a specific User or Corporate Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_exchange(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userexchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_get_user_exchange_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_get_user_exchange_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_get_user_exchange_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves a specific User or Corporate Exchange.  # noqa: E501

        Retrieve a specific User or Corporate Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_exchange_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userexchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_get_user_exchange" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_get_user_exchange`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_get_user_exchange`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_get_user_exchange`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Userexchange]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_get_user_exchange_instrument(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves a specific Instrument for a User or Corporate Exchange.  # noqa: E501

        Retrieves a specific Instrument for a User or Corporate Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_exchange_instrument(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userexchangeinstrument]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_get_user_exchange_instrument_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_get_user_exchange_instrument_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_get_user_exchange_instrument_with_http_info(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves a specific Instrument for a User or Corporate Exchange.  # noqa: E501

        Retrieves a specific Instrument for a User or Corporate Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_exchange_instrument_with_http_info(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userexchangeinstrument]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'instrument', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_get_user_exchange_instrument" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_get_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and ('instrument' not in params or
                                                       params['instrument'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument` when calling `user_instruments_get_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_get_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_get_user_exchange_instrument`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'instrument' in params:
            path_params['instrument'] = params['instrument']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}/instruments/{instrument}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Userexchangeinstrument]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_get_user_exchange_instruments(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Instruments for a User or Corporate Exchange.  # noqa: E501

        Retrieves the list of Instruments for a User or Corporate Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_exchange_instruments(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userexchangeinstrument]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_get_user_exchange_instruments_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_get_user_exchange_instruments_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_get_user_exchange_instruments_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Instruments for a User or Corporate Exchange.  # noqa: E501

        Retrieves the list of Instruments for a User or Corporate Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_exchange_instruments_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userexchangeinstrument]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_get_user_exchange_instruments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_get_user_exchange_instruments`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_get_user_exchange_instruments`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_get_user_exchange_instruments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}/instruments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Userexchangeinstrument]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_get_user_exchanges(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of User and Corporate Exchanges.  # noqa: E501

        Retrieve the list of User and Corporate Exchanges.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_exchanges(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userexchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_get_user_exchanges_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_get_user_exchanges_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_get_user_exchanges_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of User and Corporate Exchanges.  # noqa: E501

        Retrieve the list of User and Corporate Exchanges.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_exchanges_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userexchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_get_user_exchanges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_get_user_exchanges`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_get_user_exchanges`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Userexchange]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_get_user_instrument_price_history(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves price history for a specific User or Corporate Instrument.  # noqa: E501

        Retrieves price history for a specific User or Corporate Instrument.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_instrument_price_history(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userexchangeinstrument]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_get_user_instrument_price_history_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_get_user_instrument_price_history_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_get_user_instrument_price_history_with_http_info(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves price history for a specific User or Corporate Instrument.  # noqa: E501

        Retrieves price history for a specific User or Corporate Instrument.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_instrument_price_history_with_http_info(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userexchangeinstrument]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'instrument', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_get_user_instrument_price_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_get_user_instrument_price_history`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and ('instrument' not in params or
                                                       params['instrument'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument` when calling `user_instruments_get_user_instrument_price_history`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_get_user_instrument_price_history`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_get_user_instrument_price_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'instrument' in params:
            path_params['instrument'] = params['instrument']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}/instruments/{instrument}/pricehistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Userexchangeinstrument]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_get_user_instrument_splits(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves Splits for a specific User or Corporate Instrument.  # noqa: E501

        Retrieves Splits for a specific User or Corporate Instrument.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_instrument_splits(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userinstrumentsplit]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_get_user_instrument_splits_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_get_user_instrument_splits_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_get_user_instrument_splits_with_http_info(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves Splits for a specific User or Corporate Instrument.  # noqa: E501

        Retrieves Splits for a specific User or Corporate Instrument.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_get_user_instrument_splits_with_http_info(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userinstrumentsplit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'instrument', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_get_user_instrument_splits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_get_user_instrument_splits`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and ('instrument' not in params or
                                                       params['instrument'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument` when calling `user_instruments_get_user_instrument_splits`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_get_user_instrument_splits`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_get_user_instrument_splits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'instrument' in params:
            path_params['instrument'] = params['instrument']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}/instruments/{instrument}/splits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Userinstrumentsplit]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_post_user_calendar(self, calendar, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new User or Corporate Calendar.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_calendar(calendar, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Usercalendar calendar: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_post_user_calendar_with_http_info(calendar, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_post_user_calendar_with_http_info(calendar, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_post_user_calendar_with_http_info(self, calendar, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new User or Corporate Calendar.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_calendar_with_http_info(calendar, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Usercalendar calendar: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['calendar', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_post_user_calendar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'calendar' is set
        if self.api_client.client_side_validation and ('calendar' not in params or
                                                       params['calendar'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `calendar` when calling `user_instruments_post_user_calendar`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_post_user_calendar`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_post_user_calendar`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'calendar' in params:
            body_params = params['calendar']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usercalendars', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_post_user_calendar_holidays(self, id, holidays, api_key, user_id, **kwargs):  # noqa: E501
        """Adds one or more new Holidays to a User or Corporate Calendar.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_calendar_holidays(id, holidays, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The calendar_id. (required)
        :param list[Usercalendarholiday] holidays: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_post_user_calendar_holidays_with_http_info(id, holidays, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_post_user_calendar_holidays_with_http_info(id, holidays, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_post_user_calendar_holidays_with_http_info(self, id, holidays, api_key, user_id, **kwargs):  # noqa: E501
        """Adds one or more new Holidays to a User or Corporate Calendar.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_calendar_holidays_with_http_info(id, holidays, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The calendar_id. (required)
        :param list[Usercalendarholiday] holidays: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'holidays', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_post_user_calendar_holidays" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_post_user_calendar_holidays`")  # noqa: E501
        # verify the required parameter 'holidays' is set
        if self.api_client.client_side_validation and ('holidays' not in params or
                                                       params['holidays'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `holidays` when calling `user_instruments_post_user_calendar_holidays`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_post_user_calendar_holidays`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_post_user_calendar_holidays`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'holidays' in params:
            body_params = params['holidays']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usercalendars/{id}/holidays', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_post_user_exchange(self, exchange, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new User or Corporate Exchange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_exchange(exchange, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Userexchange exchange: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_post_user_exchange_with_http_info(exchange, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_post_user_exchange_with_http_info(exchange, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_post_user_exchange_with_http_info(self, exchange, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new User or Corporate Exchange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_exchange_with_http_info(exchange, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Userexchange exchange: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_post_user_exchange" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if self.api_client.client_side_validation and ('exchange' not in params or
                                                       params['exchange'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exchange` when calling `user_instruments_post_user_exchange`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_post_user_exchange`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_post_user_exchange`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'exchange' in params:
            body_params = params['exchange']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_post_user_exchange_instrument(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new Instrument to a User or Corporate Exchange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_exchange_instrument(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param Userexchangeinstrument instrument: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_post_user_exchange_instrument_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_post_user_exchange_instrument_with_http_info(id, instrument, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_post_user_exchange_instrument_with_http_info(self, id, instrument, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new Instrument to a User or Corporate Exchange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_exchange_instrument_with_http_info(id, instrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param Userexchangeinstrument instrument: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'instrument', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_post_user_exchange_instrument" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_post_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and ('instrument' not in params or
                                                       params['instrument'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument` when calling `user_instruments_post_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_post_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_post_user_exchange_instrument`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'instrument' in params:
            body_params = params['instrument']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}/instruments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_post_user_instrument_price_history(self, id, instrument, pricehistory, api_key, user_id, **kwargs):  # noqa: E501
        """Adds / replaces price history for a User or Corporate Instrument.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_instrument_price_history(id, instrument, pricehistory, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param list[Userinstrumentpricehistory] pricehistory: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_post_user_instrument_price_history_with_http_info(id, instrument, pricehistory, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_post_user_instrument_price_history_with_http_info(id, instrument, pricehistory, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_post_user_instrument_price_history_with_http_info(self, id, instrument, pricehistory, api_key, user_id, **kwargs):  # noqa: E501
        """Adds / replaces price history for a User or Corporate Instrument.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_instrument_price_history_with_http_info(id, instrument, pricehistory, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param list[Userinstrumentpricehistory] pricehistory: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'instrument', 'pricehistory', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_post_user_instrument_price_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_post_user_instrument_price_history`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and ('instrument' not in params or
                                                       params['instrument'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument` when calling `user_instruments_post_user_instrument_price_history`")  # noqa: E501
        # verify the required parameter 'pricehistory' is set
        if self.api_client.client_side_validation and ('pricehistory' not in params or
                                                       params['pricehistory'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pricehistory` when calling `user_instruments_post_user_instrument_price_history`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_post_user_instrument_price_history`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_post_user_instrument_price_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'instrument' in params:
            path_params['instrument'] = params['instrument']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pricehistory' in params:
            body_params = params['pricehistory']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}/instruments/{instrument}/pricehistory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_post_user_instrument_splits(self, id, instrument, splits, api_key, user_id, **kwargs):  # noqa: E501
        """Adds one or more Splits to a Corporate Instrument.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_instrument_splits(id, instrument, splits, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param list[Userinstrumentsplit] splits: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_post_user_instrument_splits_with_http_info(id, instrument, splits, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_post_user_instrument_splits_with_http_info(id, instrument, splits, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_post_user_instrument_splits_with_http_info(self, id, instrument, splits, api_key, user_id, **kwargs):  # noqa: E501
        """Adds one or more Splits to a Corporate Instrument.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_post_user_instrument_splits_with_http_info(id, instrument, splits, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param list[Userinstrumentsplit] splits: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'instrument', 'splits', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_post_user_instrument_splits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_post_user_instrument_splits`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and ('instrument' not in params or
                                                       params['instrument'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument` when calling `user_instruments_post_user_instrument_splits`")  # noqa: E501
        # verify the required parameter 'splits' is set
        if self.api_client.client_side_validation and ('splits' not in params or
                                                       params['splits'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `splits` when calling `user_instruments_post_user_instrument_splits`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_post_user_instrument_splits`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_post_user_instrument_splits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'instrument' in params:
            path_params['instrument'] = params['instrument']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'splits' in params:
            body_params = params['splits']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}/instruments/{instrument}/splits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_put_exchange(self, id, exchange, api_key, user_id, **kwargs):  # noqa: E501
        """Updates a User or Corporate Exchange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_put_exchange(id, exchange, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param Userexchange exchange: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_put_exchange_with_http_info(id, exchange, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_put_exchange_with_http_info(id, exchange, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_put_exchange_with_http_info(self, id, exchange, api_key, user_id, **kwargs):  # noqa: E501
        """Updates a User or Corporate Exchange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_put_exchange_with_http_info(id, exchange, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param Userexchange exchange: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'exchange', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_put_exchange" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_put_exchange`")  # noqa: E501
        # verify the required parameter 'exchange' is set
        if self.api_client.client_side_validation and ('exchange' not in params or
                                                       params['exchange'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exchange` when calling `user_instruments_put_exchange`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_put_exchange`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_put_exchange`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'exchange' in params:
            body_params = params['exchange']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_put_user_calendar(self, id, calendar, api_key, user_id, **kwargs):  # noqa: E501
        """Updates a User or Corporate Calendar.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_put_user_calendar(id, calendar, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The calendar_id. (required)
        :param Usercalendar calendar: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_put_user_calendar_with_http_info(id, calendar, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_put_user_calendar_with_http_info(id, calendar, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_put_user_calendar_with_http_info(self, id, calendar, api_key, user_id, **kwargs):  # noqa: E501
        """Updates a User or Corporate Calendar.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_put_user_calendar_with_http_info(id, calendar, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The calendar_id. (required)
        :param Usercalendar calendar: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'calendar', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_put_user_calendar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_put_user_calendar`")  # noqa: E501
        # verify the required parameter 'calendar' is set
        if self.api_client.client_side_validation and ('calendar' not in params or
                                                       params['calendar'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `calendar` when calling `user_instruments_put_user_calendar`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_put_user_calendar`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_put_user_calendar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'calendar' in params:
            body_params = params['calendar']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/usercalendars/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_instruments_put_user_exchange_instrument(self, id, instrument, userexchangeinstrument, api_key, user_id, **kwargs):  # noqa: E501
        """Updates a specific Instrument for a User or Corporate Exchange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_put_user_exchange_instrument(id, instrument, userexchangeinstrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param Userexchangeinstrument userexchangeinstrument: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_instruments_put_user_exchange_instrument_with_http_info(id, instrument, userexchangeinstrument, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_instruments_put_user_exchange_instrument_with_http_info(id, instrument, userexchangeinstrument, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def user_instruments_put_user_exchange_instrument_with_http_info(self, id, instrument, userexchangeinstrument, api_key, user_id, **kwargs):  # noqa: E501
        """Updates a specific Instrument for a User or Corporate Exchange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_instruments_put_user_exchange_instrument_with_http_info(id, instrument, userexchangeinstrument, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The exchange_id. (required)
        :param str instrument: The Instrument symbol. (required)
        :param Userexchangeinstrument userexchangeinstrument: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'instrument', 'userexchangeinstrument', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_instruments_put_user_exchange_instrument" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_instruments_put_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and ('instrument' not in params or
                                                       params['instrument'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument` when calling `user_instruments_put_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'userexchangeinstrument' is set
        if self.api_client.client_side_validation and ('userexchangeinstrument' not in params or
                                                       params['userexchangeinstrument'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `userexchangeinstrument` when calling `user_instruments_put_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `user_instruments_put_user_exchange_instrument`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_instruments_put_user_exchange_instrument`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'instrument' in params:
            path_params['instrument'] = params['instrument']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'userexchangeinstrument' in params:
            body_params = params['userexchangeinstrument']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/userexchanges/{id}/instruments/{instrument}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
