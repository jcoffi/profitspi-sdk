# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from profitspi-sdk.api_client import ApiClient


class ScreeningApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def screening_delete_screen(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes a User Screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_delete_screen(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.screening_delete_screen_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.screening_delete_screen_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def screening_delete_screen_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes a User Screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_delete_screen_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method screening_delete_screen" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `screening_delete_screen`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `screening_delete_screen`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `screening_delete_screen`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screens/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def screening_get_default_screen(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the definition and results for a Default Screen.  # noqa: E501

        Returns the definition and results for a Default Screen. View the results or use the definition to create a User Screen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_default_screen(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the Default Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime screen_date: A date in the format yyyy-mm-dd to backdate the screen. Default is latest date.
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :return: Screen
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.screening_get_default_screen_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.screening_get_default_screen_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def screening_get_default_screen_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the definition and results for a Default Screen.  # noqa: E501

        Returns the definition and results for a Default Screen. View the results or use the definition to create a User Screen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_default_screen_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the Default Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime screen_date: A date in the format yyyy-mm-dd to backdate the screen. Default is latest date.
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :return: Screen
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id', 'screen_date', 'per_page', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method screening_get_default_screen" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `screening_get_default_screen`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `screening_get_default_screen`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `screening_get_default_screen`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'screen_date' in params:
            query_params.append(('screen_date', params['screen_date']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/defaultscreens/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Screen',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def screening_get_default_screens(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Default Screens.  # noqa: E501

        Returns a list of Default Screens with summary information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_default_screens(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Defaultscreen]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.screening_get_default_screens_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.screening_get_default_screens_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def screening_get_default_screens_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Default Screens.  # noqa: E501

        Returns a list of Default Screens with summary information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_default_screens_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Defaultscreen]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method screening_get_default_screens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `screening_get_default_screens`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `screening_get_default_screens`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/defaultscreens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Defaultscreen]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def screening_get_user_screen_additional_items(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the additional result items definition only for a User Screen.  # noqa: E501

        Returns the additional results items definition for a User Screen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_user_screen_additional_items(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Additionalresultitems
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.screening_get_user_screen_additional_items_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.screening_get_user_screen_additional_items_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def screening_get_user_screen_additional_items_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the additional result items definition only for a User Screen.  # noqa: E501

        Returns the additional results items definition for a User Screen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_user_screen_additional_items_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Additionalresultitems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method screening_get_user_screen_additional_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `screening_get_user_screen_additional_items`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `screening_get_user_screen_additional_items`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `screening_get_user_screen_additional_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screens/{id}/additionalresultitems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Additionalresultitems',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def screening_get_user_screen_criteria(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the criteria definition only for a User Screen.  # noqa: E501

        Returns the criteria definition for a User Screen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_user_screen_criteria(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Criteriapair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.screening_get_user_screen_criteria_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.screening_get_user_screen_criteria_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def screening_get_user_screen_criteria_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the criteria definition only for a User Screen.  # noqa: E501

        Returns the criteria definition for a User Screen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_user_screen_criteria_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Criteriapair
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method screening_get_user_screen_criteria" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `screening_get_user_screen_criteria`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `screening_get_user_screen_criteria`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `screening_get_user_screen_criteria`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screens/{id}/criteria', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Criteriapair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def screening_get_user_screen_results(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the results only for a User Screen.  # noqa: E501

        Returns the results for a User Screen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_user_screen_results(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime screen_date: A date in the format yyyy-mm-dd to backdate the screen. Default is latest date.
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :return: Screenresult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.screening_get_user_screen_results_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.screening_get_user_screen_results_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def screening_get_user_screen_results_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the results only for a User Screen.  # noqa: E501

        Returns the results for a User Screen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_user_screen_results_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime screen_date: A date in the format yyyy-mm-dd to backdate the screen. Default is latest date.
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :return: Screenresult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id', 'screen_date', 'per_page', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method screening_get_user_screen_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `screening_get_user_screen_results`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `screening_get_user_screen_results`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `screening_get_user_screen_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'screen_date' in params:
            query_params.append(('screen_date', params['screen_date']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screens/{id}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Screenresult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def screening_get_user_screens(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Screens for a User.  # noqa: E501

        Returns a list of Screens for a User with summary information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_user_screens(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userscreen]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.screening_get_user_screens_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.screening_get_user_screens_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def screening_get_user_screens_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Screens for a User.  # noqa: E501

        Returns a list of Screens for a User with summary information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_user_screens_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Userscreen]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method screening_get_user_screens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `screening_get_user_screens`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `screening_get_user_screens`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Userscreen]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def screening_get_user_screens_0(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the definition and results for a User Screen.  # noqa: E501

        Returns the definition and results for a User Screen. View the results or use the definition to create another User Screen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_user_screens_0(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime screen_date: A date in the format yyyy-mm-dd to backdate the screen. Default is latest date.
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :return: Screen
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.screening_get_user_screens_0_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.screening_get_user_screens_0_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def screening_get_user_screens_0_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the definition and results for a User Screen.  # noqa: E501

        Returns the definition and results for a User Screen. View the results or use the definition to create another User Screen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_get_user_screens_0_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param datetime screen_date: A date in the format yyyy-mm-dd to backdate the screen. Default is latest date.
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :return: Screen
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id', 'screen_date', 'per_page', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method screening_get_user_screens_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `screening_get_user_screens_0`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `screening_get_user_screens_0`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `screening_get_user_screens_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'screen_date' in params:
            query_params.append(('screen_date', params['screen_date']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screens/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Screen',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def screening_post_screen(self, screen, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new User Screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_post_screen(screen, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Screen screen: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.screening_post_screen_with_http_info(screen, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.screening_post_screen_with_http_info(screen, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def screening_post_screen_with_http_info(self, screen, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new User Screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_post_screen_with_http_info(screen, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Screen screen: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['screen', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method screening_post_screen" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'screen' is set
        if self.api_client.client_side_validation and ('screen' not in params or
                                                       params['screen'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `screen` when calling `screening_post_screen`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `screening_post_screen`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `screening_post_screen`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'screen' in params:
            body_params = params['screen']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def screening_put_screen(self, id, screen, api_key, user_id, **kwargs):  # noqa: E501
        """Updates a User Screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_put_screen(id, screen, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param Screen screen: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.screening_put_screen_with_http_info(id, screen, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.screening_put_screen_with_http_info(id, screen, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def screening_put_screen_with_http_info(self, id, screen, api_key, user_id, **kwargs):  # noqa: E501
        """Updates a User Screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.screening_put_screen_with_http_info(id, screen, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The screen_id from the User Screens API. (required)
        :param Screen screen: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'screen', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method screening_put_screen" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `screening_put_screen`")  # noqa: E501
        # verify the required parameter 'screen' is set
        if self.api_client.client_side_validation and ('screen' not in params or
                                                       params['screen'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `screen` when calling `screening_put_screen`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `screening_put_screen`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `screening_put_screen`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'screen' in params:
            body_params = params['screen']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/screens/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
