# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from profitspi-sdk.api_client import ApiClient


class BacktestingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def backtesting_delete_strategy(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes a User Strategy and all it's Tests.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_delete_strategy(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_delete_strategy_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_delete_strategy_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_delete_strategy_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes a User Strategy and all it's Tests.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_delete_strategy_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_delete_strategy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `backtesting_delete_strategy`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_delete_strategy`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_delete_strategy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/strategies/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backtesting_delete_strategy_test(self, id, test, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes a User Strategy Test.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_delete_strategy_test(id, test, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param int test: The test_num from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_delete_strategy_test_with_http_info(id, test, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_delete_strategy_test_with_http_info(id, test, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_delete_strategy_test_with_http_info(self, id, test, api_key, user_id, **kwargs):  # noqa: E501
        """Deletes a User Strategy Test.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_delete_strategy_test_with_http_info(id, test, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param int test: The test_num from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'test', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_delete_strategy_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `backtesting_delete_strategy_test`")  # noqa: E501
        # verify the required parameter 'test' is set
        if self.api_client.client_side_validation and ('test' not in params or
                                                       params['test'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test` when calling `backtesting_delete_strategy_test`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_delete_strategy_test`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_delete_strategy_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'test' in params:
            path_params['test'] = params['test']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/strategies/{id}/tests/{test}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backtesting_get_default_strategies(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Default Strategies.  # noqa: E501

        Returns a list of Default Strategies with summary information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_default_strategies(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Defaultstrategy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_get_default_strategies_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_get_default_strategies_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_get_default_strategies_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Default Strategies.  # noqa: E501

        Returns a list of Default Strategies with summary information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_default_strategies_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Defaultstrategy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_get_default_strategies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_get_default_strategies`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_get_default_strategies`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/defaultstrategies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Defaultstrategy]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backtesting_get_default_strategy_test(self, id, test, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the definition and results for a Default Strategy Test.  # noqa: E501

        Returns the definition and results for a Default Strategy Test. View the results or use the definition to create a User Strategy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_default_strategy_test(id, test, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the Default Strategies API. (required)
        :param int test: The test_num from the Default Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Strategytest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_get_default_strategy_test_with_http_info(id, test, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_get_default_strategy_test_with_http_info(id, test, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_get_default_strategy_test_with_http_info(self, id, test, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the definition and results for a Default Strategy Test.  # noqa: E501

        Returns the definition and results for a Default Strategy Test. View the results or use the definition to create a User Strategy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_default_strategy_test_with_http_info(id, test, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the Default Strategies API. (required)
        :param int test: The test_num from the Default Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Strategytest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'test', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_get_default_strategy_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `backtesting_get_default_strategy_test`")  # noqa: E501
        # verify the required parameter 'test' is set
        if self.api_client.client_side_validation and ('test' not in params or
                                                       params['test'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test` when calling `backtesting_get_default_strategy_test`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_get_default_strategy_test`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_get_default_strategy_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'test' in params:
            path_params['test'] = params['test']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/defaultstrategies/{id}/tests/{test}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Strategytest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backtesting_get_user_strategies(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategies for a User.  # noqa: E501

        Returns a list of Strategies for a User with summary information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_user_strategies(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Strategy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_get_user_strategies_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_get_user_strategies_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_get_user_strategies_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategies for a User.  # noqa: E501

        Returns a list of Strategies for a User with summary information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_user_strategies_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Strategy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_get_user_strategies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_get_user_strategies`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_get_user_strategies`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/strategies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Strategy]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backtesting_get_user_strategy_test(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Tests for a User Strategy.  # noqa: E501

        Returns a list of Tests for a User Strategy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_user_strategy_test(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Strategytestsummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_get_user_strategy_test_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_get_user_strategy_test_with_http_info(id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_get_user_strategy_test_with_http_info(self, id, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Tests for a User Strategy.  # noqa: E501

        Returns a list of Tests for a User Strategy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_user_strategy_test_with_http_info(id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Strategytestsummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_get_user_strategy_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `backtesting_get_user_strategy_test`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_get_user_strategy_test`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_get_user_strategy_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/strategies/{id}/tests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Strategytestsummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backtesting_get_user_strategy_test_0(self, id, test, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the definition and results for a User Strategy Test.  # noqa: E501

        Returns the definition and results for a User Strategy Test. View the results or use the definition to create a User Strategy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_user_strategy_test_0(id, test, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param int test: The test_num from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Strategytest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_get_user_strategy_test_0_with_http_info(id, test, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_get_user_strategy_test_0_with_http_info(id, test, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_get_user_strategy_test_0_with_http_info(self, id, test, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the definition and results for a User Strategy Test.  # noqa: E501

        Returns the definition and results for a User Strategy Test. View the results or use the definition to create a User Strategy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_user_strategy_test_0_with_http_info(id, test, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param int test: The test_num from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Strategytest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'test', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_get_user_strategy_test_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `backtesting_get_user_strategy_test_0`")  # noqa: E501
        # verify the required parameter 'test' is set
        if self.api_client.client_side_validation and ('test' not in params or
                                                       params['test'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test` when calling `backtesting_get_user_strategy_test_0`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_get_user_strategy_test_0`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_get_user_strategy_test_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'test' in params:
            path_params['test'] = params['test']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/strategies/{id}/tests/{test}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Strategytest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backtesting_get_user_strategy_test_history(self, id, test, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the history for a User Strategy Test.  # noqa: E501

        Returns the history for a User Strategy Test.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_user_strategy_test_history(id, test, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param int test: The test_num from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param str period_type: Use \"M\" for Monthly, \"Y\" for Yearly. Default is \"D\" for Daily
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :return: Strategytesthistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_get_user_strategy_test_history_with_http_info(id, test, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_get_user_strategy_test_history_with_http_info(id, test, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_get_user_strategy_test_history_with_http_info(self, id, test, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the history for a User Strategy Test.  # noqa: E501

        Returns the history for a User Strategy Test.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_user_strategy_test_history_with_http_info(id, test, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param int test: The test_num from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param str period_type: Use \"M\" for Monthly, \"Y\" for Yearly. Default is \"D\" for Daily
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :return: Strategytesthistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'test', 'api_key', 'user_id', 'period_type', 'per_page', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_get_user_strategy_test_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `backtesting_get_user_strategy_test_history`")  # noqa: E501
        # verify the required parameter 'test' is set
        if self.api_client.client_side_validation and ('test' not in params or
                                                       params['test'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test` when calling `backtesting_get_user_strategy_test_history`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_get_user_strategy_test_history`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_get_user_strategy_test_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'test' in params:
            path_params['test'] = params['test']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'period_type' in params:
            query_params.append(('period_type', params['period_type']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/strategies/{id}/tests/{test}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Strategytesthistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backtesting_get_user_strategy_test_trades(self, id, test, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the trades generated for a User Strategy Test.  # noqa: E501

        Returns the trades generated for a User Strategy Test.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_user_strategy_test_trades(id, test, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param int test: The test_num from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :return: Strategytesttrades
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_get_user_strategy_test_trades_with_http_info(id, test, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_get_user_strategy_test_trades_with_http_info(id, test, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_get_user_strategy_test_trades_with_http_info(self, id, test, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the trades generated for a User Strategy Test.  # noqa: E501

        Returns the trades generated for a User Strategy Test.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_get_user_strategy_test_trades_with_http_info(id, test, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The strategy_id from the User Strategies API. (required)
        :param int test: The test_num from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :param int per_page: The page size for the results. Default is 100.
        :param int page: A specific page when paging thru the results. Default is 0.
        :return: Strategytesttrades
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'test', 'api_key', 'user_id', 'per_page', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_get_user_strategy_test_trades" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `backtesting_get_user_strategy_test_trades`")  # noqa: E501
        # verify the required parameter 'test' is set
        if self.api_client.client_side_validation and ('test' not in params or
                                                       params['test'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test` when calling `backtesting_get_user_strategy_test_trades`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_get_user_strategy_test_trades`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_get_user_strategy_test_trades`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'test' in params:
            path_params['test'] = params['test']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/strategies/{id}/tests/{test}/trades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Strategytesttrades',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backtesting_post_strategy(self, strategytest, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new User Strategy Test to a new Strategy and initiates a Test Run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_post_strategy(strategytest, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Strategytest strategytest: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_post_strategy_with_http_info(strategytest, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_post_strategy_with_http_info(strategytest, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_post_strategy_with_http_info(self, strategytest, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new User Strategy Test to a new Strategy and initiates a Test Run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_post_strategy_with_http_info(strategytest, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Strategytest strategytest: (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['strategytest', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_post_strategy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'strategytest' is set
        if self.api_client.client_side_validation and ('strategytest' not in params or
                                                       params['strategytest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `strategytest` when calling `backtesting_post_strategy`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_post_strategy`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_post_strategy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'strategytest' in params:
            body_params = params['strategytest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/strategies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backtesting_post_strategy_test(self, strategytest, id, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new User Strategy Test to an existing Strategy and initiates a Test Run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_post_strategy_test(strategytest, id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Strategytest strategytest: (required)
        :param int id: The strategy_id from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_post_strategy_test_with_http_info(strategytest, id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_post_strategy_test_with_http_info(strategytest, id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_post_strategy_test_with_http_info(self, strategytest, id, api_key, user_id, **kwargs):  # noqa: E501
        """Adds a new User Strategy Test to an existing Strategy and initiates a Test Run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_post_strategy_test_with_http_info(strategytest, id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Strategytest strategytest: (required)
        :param int id: The strategy_id from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['strategytest', 'id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_post_strategy_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'strategytest' is set
        if self.api_client.client_side_validation and ('strategytest' not in params or
                                                       params['strategytest'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `strategytest` when calling `backtesting_post_strategy_test`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `backtesting_post_strategy_test`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_post_strategy_test`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_post_strategy_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'strategytest' in params:
            body_params = params['strategytest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/strategies/{id}/tests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backtesting_put_strategy(self, strategy, id, api_key, user_id, **kwargs):  # noqa: E501
        """Updates header information for a User Strategy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_put_strategy(strategy, id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Strategy strategy: (required)
        :param int id: The strategy_id from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backtesting_put_strategy_with_http_info(strategy, id, api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.backtesting_put_strategy_with_http_info(strategy, id, api_key, user_id, **kwargs)  # noqa: E501
            return data

    def backtesting_put_strategy_with_http_info(self, strategy, id, api_key, user_id, **kwargs):  # noqa: E501
        """Updates header information for a User Strategy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backtesting_put_strategy_with_http_info(strategy, id, api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Strategy strategy: (required)
        :param int id: The strategy_id from the User Strategies API. (required)
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['strategy', 'id', 'api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backtesting_put_strategy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'strategy' is set
        if self.api_client.client_side_validation and ('strategy' not in params or
                                                       params['strategy'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `strategy` when calling `backtesting_put_strategy`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `backtesting_put_strategy`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `backtesting_put_strategy`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `backtesting_put_strategy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'strategy' in params:
            body_params = params['strategy']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/strategies/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
