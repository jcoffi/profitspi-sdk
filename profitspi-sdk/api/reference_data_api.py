# coding: utf-8

"""
    Profitspi API v1

    <div><p>Welcome to the Profitspi.com API v1 Beta. Here you will find a complete description of all the current APIs. Please check back regularly as we continue to roll-out new functions.</p><p>For example, to retrieve the list of default screens use https://www.profitspi.com/api/v1/defaultscreens?api_key={api_key}&user_id={user_id}.</p> <p>Functions will return JSON or XML depending on an Accept header setting of 'application/json' or 'application/xml' respectively, with JSON being the default. The Instruments functions can also return CSV for an Accept header setting of 'text/csv'. As an alternative to an Accept header add a query parameter of 'format='JSON|XML|CSV'.</p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from profitspi-sdk.api_client import ApiClient


class ReferenceDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def reference_data_get_criteria_conditions(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Criteria Conditions.  # noqa: E501

        Returns a list of Criteria Condition ids with their descriptions and usage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_criteria_conditions(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Criteriacondition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_criteria_conditions_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_criteria_conditions_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_criteria_conditions_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Criteria Conditions.  # noqa: E501

        Returns a list of Criteria Condition ids with their descriptions and usage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_criteria_conditions_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Criteriacondition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_criteria_conditions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_criteria_conditions`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_criteria_conditions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/criteriaconditions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Criteriacondition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_days_to_test_codes(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Days to Test Codes.  # noqa: E501

        Returns a list of Strategy Days to Test Codes with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_days_to_test_codes(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Daystotest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_days_to_test_codes_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_days_to_test_codes_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_days_to_test_codes_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Days to Test Codes.  # noqa: E501

        Returns a list of Strategy Days to Test Codes with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_days_to_test_codes_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Daystotest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_days_to_test_codes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_days_to_test_codes`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_days_to_test_codes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/daystotestcodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Daystotest]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_indicator_aliases(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Indicator Aliases.  # noqa: E501

        Returns a list of Indicators with their aliases and descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_indicator_aliases(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Indicatoralias]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_indicator_aliases_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_indicator_aliases_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_indicator_aliases_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Indicator Aliases.  # noqa: E501

        Returns a list of Indicators with their aliases and descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_indicator_aliases_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Indicatoralias]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_indicator_aliases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_indicator_aliases`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_indicator_aliases`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/indicatoraliases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Indicatoralias]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_indicator_types(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Indicator Types.  # noqa: E501

        Returns a list of Indicator Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_indicator_types(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Indicatortype]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_indicator_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_indicator_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_indicator_types_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Indicator Types.  # noqa: E501

        Returns a list of Indicator Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_indicator_types_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Indicatortype]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_indicator_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_indicator_types`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_indicator_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/indicatortypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Indicatortype]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_indicators(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Indicators.  # noqa: E501

        Returns a list of Indicators with their descriptions and attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_indicators(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Indicator]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_indicators_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_indicators_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_indicators_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Indicators.  # noqa: E501

        Returns a list of Indicators with their descriptions and attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_indicators_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Indicator]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_indicators" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_indicators`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_indicators`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/indicators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Indicator]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_periods(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Periods.  # noqa: E501

        Returns a list of Period ids with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_periods(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Period]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_periods_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_periods_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_periods_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Periods.  # noqa: E501

        Returns a list of Period ids with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_periods_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Period]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_periods" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_periods`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_periods`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/periods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Period]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_position_entry_price_types(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Position Entry Price Types.  # noqa: E501

        Returns a list of Strategy Position Entry Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_position_entry_price_types(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Positionentrypricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_position_entry_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_position_entry_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_position_entry_price_types_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Position Entry Price Types.  # noqa: E501

        Returns a list of Strategy Position Entry Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_position_entry_price_types_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Positionentrypricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_position_entry_price_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_position_entry_price_types`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_position_entry_price_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positionentrypricetypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Positionentrypricetype]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_position_exit_price_types(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Position Exit Price Types.  # noqa: E501

        Returns a list of Strategy Position Exit Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_position_exit_price_types(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Positionexitpricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_position_exit_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_position_exit_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_position_exit_price_types_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Position Exit Price Types.  # noqa: E501

        Returns a list of Strategy Position Exit Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_position_exit_price_types_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Positionexitpricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_position_exit_price_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_position_exit_price_types`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_position_exit_price_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positionexitpricetypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Positionexitpricetype]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_position_rounding_amounts(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Position Rounding Amounts.  # noqa: E501

        Returns a list of Strategy Position Rounding Amounts with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_position_rounding_amounts(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Positionroundingamount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_position_rounding_amounts_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_position_rounding_amounts_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_position_rounding_amounts_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Position Rounding Amounts.  # noqa: E501

        Returns a list of Strategy Position Rounding Amounts with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_position_rounding_amounts_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Positionroundingamount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_position_rounding_amounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_position_rounding_amounts`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_position_rounding_amounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positionroundingamounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Positionroundingamount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_position_sizing_types(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Position Sizing Types.  # noqa: E501

        Returns a list of Strategy Position Sizing Ids with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_position_sizing_types(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Positionsizingtype]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_position_sizing_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_position_sizing_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_position_sizing_types_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Position Sizing Types.  # noqa: E501

        Returns a list of Strategy Position Sizing Ids with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_position_sizing_types_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Positionsizingtype]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_position_sizing_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_position_sizing_types`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_position_sizing_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positionsizingtypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Positionsizingtype]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_stop_loss_exit_price_types(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Stop Loss Exit Price Types.  # noqa: E501

        Returns a list of Strategy Stop Loss Exit Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_stop_loss_exit_price_types(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Stoplossexitpricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_stop_loss_exit_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_stop_loss_exit_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_stop_loss_exit_price_types_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Stop Loss Exit Price Types.  # noqa: E501

        Returns a list of Strategy Stop Loss Exit Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_stop_loss_exit_price_types_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Stoplossexitpricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_stop_loss_exit_price_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_stop_loss_exit_price_types`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_stop_loss_exit_price_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stoplossexitpricetypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Stoplossexitpricetype]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_target_exit_price_types(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Target Exit Price Types.  # noqa: E501

        Returns a list of Strategy Target Exit Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_target_exit_price_types(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Targetexitpricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_target_exit_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_target_exit_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_target_exit_price_types_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Target Exit Price Types.  # noqa: E501

        Returns a list of Strategy Target Exit Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_target_exit_price_types_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Targetexitpricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_target_exit_price_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_target_exit_price_types`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_target_exit_price_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/targetexitpricetypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Targetexitpricetype]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_time_stop_exit_price_types(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Time Stop Exit Price Types.  # noqa: E501

        Returns a list of Strategy Time Exit Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_time_stop_exit_price_types(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Timestopexitpricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_time_stop_exit_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_time_stop_exit_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_time_stop_exit_price_types_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Time Stop Exit Price Types.  # noqa: E501

        Returns a list of Strategy Time Exit Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_time_stop_exit_price_types_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Timestopexitpricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_time_stop_exit_price_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_time_stop_exit_price_types`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_time_stop_exit_price_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/timestopexitpricetypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Timestopexitpricetype]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_trailing_stop_loss_exit_price_types(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Trailing Stop Loss Exit Price Types.  # noqa: E501

        Returns a list of Strategy Trailing Stop Loss Exit Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_trailing_stop_loss_exit_price_types(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Trailingstoplossexitpricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_trailing_stop_loss_exit_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_trailing_stop_loss_exit_price_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_trailing_stop_loss_exit_price_types_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Trailing Stop Loss Exit Price Types.  # noqa: E501

        Returns a list of Strategy Trailing Stop Loss Exit Price Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_trailing_stop_loss_exit_price_types_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Trailingstoplossexitpricetype]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_trailing_stop_loss_exit_price_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_trailing_stop_loss_exit_price_types`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_trailing_stop_loss_exit_price_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/trailingstoplossexitpricetypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Trailingstoplossexitpricetype]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_data_get_trailing_stop_loss_price_to_use_types(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Trailing Stop Loss Price to Use Types.  # noqa: E501

        Returns a list of Strategy Trailing Stop Loss Price to Use Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_trailing_stop_loss_price_to_use_types(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Trailingstoplosspricetouse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_data_get_trailing_stop_loss_price_to_use_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_data_get_trailing_stop_loss_price_to_use_types_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def reference_data_get_trailing_stop_loss_price_to_use_types_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """Retrieves the list of Strategy Trailing Stop Loss Price to Use Types.  # noqa: E501

        Returns a list of Strategy Trailing Stop Loss Price to Use Types with their descriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_data_get_trailing_stop_loss_price_to_use_types_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: The unique key provided to you by Profitspi.com. (required)
        :param str user_id: The unique id identifying the user. (required)
        :return: list[Trailingstoplosspricetouse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_data_get_trailing_stop_loss_price_to_use_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `reference_data_get_trailing_stop_loss_price_to_use_types`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `reference_data_get_trailing_stop_loss_price_to_use_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/trailingstoplosspricetouses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Trailingstoplosspricetouse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
